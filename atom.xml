<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个人住的七年</title>
  
  <subtitle>做自己喜欢的事，会遇见喜欢的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jybx.me/"/>
  <updated>2017-12-05T13:42:35.281Z</updated>
  <id>http://blog.jybx.me/</id>
  
  <author>
    <name>七年</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lnmp</title>
    <link href="http://blog.jybx.me/lnmp.html"/>
    <id>http://blog.jybx.me/lnmp.html</id>
    <published>2017-05-05T03:25:25.000Z</published>
    <updated>2017-12-05T13:42:35.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos-7-下安装-LNMP-官方最新版"><a href="#Centos-7-下安装-LNMP-官方最新版" class="headerlink" title="Centos 7 下安装 LNMP 官方最新版"></a>Centos 7 下安装 LNMP 官方最新版</h1><h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><blockquote><p>Nginx 版本: nginx 1.13.0<br>Mysql 版本：mysql 5.7.18<br>PHP 版本：php 7.1.5</p><p>查看 CentOS 版本号<br>cat /etc/redhat-release</p><p>Centos 版本：CentOS Linux release &gt;7.3.1611 (Core) 64位</p></blockquote><h3 id="软件更新"><a href="#软件更新" class="headerlink" title="软件更新"></a>软件更新</h3><p>阿里云 ECS 不建议升级服务器的内核和操作系统版本，所以，在进行系统软件更新操作时，应该将其剔除。</p><p>下面是查看服务器内核及系统版本，可以看一下在软件升级前后，剔除与否的区别。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -<span class="keyword">a</span></span><br><span class="line">lsb_release -<span class="keyword">a</span></span><br></pre></td></tr></table></figure><p>首先打开 /etc/yum.conf （vi /etc/yum.conf ）文件，然后在 [main] 后面加入以下两行代码，这样在软件更新时，就不会升级内核及系统版本了。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exclude</span>=kernel*</span><br><span class="line"><span class="attr">exclude</span>=centos-release*</span><br></pre></td></tr></table></figure><p>然后更新软件，-y 参数是在执行过程中，遇到的交互默认选择 yes ，如果想看一下软件的更新信息，可以去掉 -y 参数。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum -y update</span></span><br></pre></td></tr></table></figure><h3 id="主机名修改"><a href="#主机名修改" class="headerlink" title="主机名修改"></a>主机名修改</h3><p>查看主机名指令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hostname</span></span><br></pre></td></tr></table></figure><p>阿里云 ECS 默认的主机名是随机生成的，看着不是特别舒服，可以修改 /etc/hostname 文件，将现在的主机名改成自己想要的名称。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="built_in">hostname</span></span><br></pre></td></tr></table></figure><p>然后，按 ESC 输入 :wq 保存（vim 基本指令）。reboot（重启），看一下主机名是否已经变更。</p><h3 id="配置第三方-yum-源"><a href="#配置第三方-yum-源" class="headerlink" title="配置第三方 yum 源"></a>配置第三方 yum 源</h3><p>安装 centos7 的源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line">rpm -ivh <span class="keyword">http</span>://rpms.famillecollet.com/<span class="keyword">enterprise</span>/remi-<span class="keyword">release</span><span class="number">-7.</span>rpm</span><br></pre></td></tr></table></figure><h3 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> nginx</span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h3 id="使用-service-命令-操作-Nginx"><a href="#使用-service-命令-操作-Nginx" class="headerlink" title="使用 service 命令 操作 Nginx"></a>使用 service 命令 操作 Nginx</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service nginx <span class="built_in">start</span> <span class="comment"> //启动</span></span><br><span class="line">service nginx <span class="built_in">stop</span> <span class="comment"> //停止</span></span><br><span class="line">service nginx restart  <span class="comment"> //重启</span></span><br><span class="line">service nginx reload   <span class="comment"> //重新加载配置文件</span></span><br></pre></td></tr></table></figure><h3 id="Nginx-随开机自动启动"><a href="#Nginx-随开机自动启动" class="headerlink" title="Nginx 随开机自动启动"></a>Nginx 随开机自动启动</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br><span class="line"></span><br><span class="line">结果如下</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">nginx</span>.<span class="title">service</span>.</span></span><br></pre></td></tr></table></figure><h3 id="Centos7-启动服务命令（启动-Nginx）"><a href="#Centos7-启动服务命令（启动-Nginx）" class="headerlink" title="Centos7 启动服务命令（启动 Nginx）"></a>Centos7 启动服务命令（启动 Nginx）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> nginx</span><br></pre></td></tr></table></figure><h3 id="查看-Nignx-状态"><a href="#查看-Nignx-状态" class="headerlink" title="查看 Nignx 状态"></a>查看 Nignx 状态</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx</span><br><span class="line"></span><br><span class="line">结果如下</span><br><span class="line">nginx.service - nginx - high performance web server</span><br><span class="line"><span class="symbol">   Loaded:</span> loaded (<span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/nginx.service; enabled; vendor <span class="string">preset:</span> disabled)</span><br><span class="line"><span class="symbol">   Active:</span> active (running) since Fri <span class="number">2017</span><span class="number">-05</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">35</span>:<span class="number">13</span> CST; <span class="number">50</span>s ago</span><br><span class="line"><span class="symbol">     Docs:</span> <span class="string">http:</span><span class="comment">//nginx.org/en/docs/</span></span><br><span class="line"><span class="symbol">  Process:</span> <span class="number">22179</span> ExecStart=<span class="regexp">/usr/</span>sbin<span class="regexp">/nginx -c /</span>etc<span class="regexp">/nginx/</span>nginx.conf (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"><span class="symbol">  Process:</span> <span class="number">22178</span> ExecStartPre=<span class="regexp">/usr/</span>sbin<span class="regexp">/nginx -t -c /</span>etc<span class="regexp">/nginx/</span>nginx.conf (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main <span class="string">PID:</span> <span class="number">22182</span> (nginx)</span><br><span class="line"><span class="symbol">   CGroup:</span> <span class="regexp">/system.slice/</span>nginx.service</span><br><span class="line">           ├─<span class="number">22182</span> <span class="string">nginx:</span> master process <span class="regexp">/usr/</span>sbin<span class="regexp">/nginx -c /</span>etc<span class="regexp">/nginx/</span>nginx.conf</span><br><span class="line">           └─<span class="number">22183</span> <span class="string">nginx:</span> worker process</span><br><span class="line"></span><br><span class="line">May <span class="number">12</span> <span class="number">17</span>:<span class="number">35</span>:<span class="number">13</span> iZ2zehs5ueqrbkxhzynwasZ systemd[<span class="number">1</span>]: Starting nginx - high performance web.....</span><br><span class="line">May <span class="number">12</span> <span class="number">17</span>:<span class="number">35</span>:<span class="number">13</span> iZ2zehs5ueqrbkxhzynwasZ nginx[<span class="number">22178</span>]: <span class="string">nginx:</span> the configuration file <span class="regexp">/etc/</span>n...k</span><br><span class="line">May <span class="number">12</span> <span class="number">17</span>:<span class="number">35</span>:<span class="number">13</span> iZ2zehs5ueqrbkxhzynwasZ nginx[<span class="number">22178</span>]: <span class="string">nginx:</span> configuration file <span class="regexp">/etc/</span>nginx...l</span><br><span class="line">May <span class="number">12</span> <span class="number">17</span>:<span class="number">35</span>:<span class="number">13</span> iZ2zehs5ueqrbkxhzynwasZ systemd[<span class="number">1</span>]: Failed to read PID from file <span class="regexp">/run/</span>ngi...nt</span><br><span class="line">May <span class="number">12</span> <span class="number">17</span>:<span class="number">35</span>:<span class="number">13</span> iZ2zehs5ueqrbkxhzynwasZ systemd[<span class="number">1</span>]: Started nginx - high performance web ...r.</span><br><span class="line"><span class="string">Hint:</span> Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br></pre></td></tr></table></figure><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>如果上述步骤结束后，没有看到欢迎页面，可能是防火墙配置造成的（80端口没有开放），Centos7 默认的防火墙是 FirewallD。</p><p>查看防火墙运行状态</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --state</span></span><br></pre></td></tr></table></figure><p>开启 FirewallD 服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> firewalld</span><br></pre></td></tr></table></figure><p>查看 FirewallD 状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl status firewalld</span></span><br></pre></td></tr></table></figure><p>查看 FirewallD 配置</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --list-all</span></span><br></pre></td></tr></table></figure><p>开启端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=80/tcp --permanent</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=3306/tcp --permanent</span><br></pre></td></tr></table></figure><p>命令含义</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-zone <span class="comment">#作用域</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">--add-port=<span class="number">80</span>/tcp <span class="comment">#添加端口，格式为：端口/通讯协议</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">--permanent <span class="comment">#永久生效，没有此参数重启后失效</span></span></span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --reload</span></span><br></pre></td></tr></table></figure><h3 id="MySQL-最新版安装"><a href="#MySQL-最新版安装" class="headerlink" title="MySQL 最新版安装"></a>MySQL 最新版安装</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://dev.mysql.com/get/mysql57-community-<span class="keyword">release</span>-el7<span class="number">-7.</span>noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y <span class="keyword">install</span> mysql-community-<span class="keyword">server</span> mysql-community-devel</span><br></pre></td></tr></table></figure><p>MySQL 安装完成后配置文件会在这个路径 /etc/my.cnf 可以根据实际需要修改里边的选项。这里暂时不做任何修改，但有个选项是要注意的，因为后面配置 PHP 的时候讲会用到：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> socket <span class="regexp">/etc/my</span>.cnf</span><br><span class="line"></span><br><span class="line">结果如下</span><br><span class="line">socket=<span class="regexp">/var/</span>lib<span class="regexp">/mysql/my</span>sql.sock</span><br></pre></td></tr></table></figure><h3 id="查看-MySQL-状态"><a href="#查看-MySQL-状态" class="headerlink" title="查看 MySQL 状态"></a>查看 MySQL 状态</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line">结果如下</span><br><span class="line">mysqld.service - MySQL Server</span><br><span class="line"><span class="symbol">   Loaded:</span> loaded (<span class="meta-keyword">/usr/</span>lib<span class="meta-keyword">/systemd/</span>system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line"><span class="symbol">   Active:</span> inactive (dead)</span><br><span class="line"><span class="symbol">     Docs:</span> man:mysqld(<span class="number">8</span>)</span><br><span class="line"><span class="symbol">           http:</span><span class="comment">//dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br></pre></td></tr></table></figure><h3 id="Mysql-添加到开机启动项"><a href="#Mysql-添加到开机启动项" class="headerlink" title="Mysql 添加到开机启动项"></a>Mysql 添加到开机启动项</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> mysqld</span><br></pre></td></tr></table></figure><h3 id="启动-MySQL"><a href="#启动-MySQL" class="headerlink" title="启动 MySQL"></a>启动 MySQL</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> mysqld</span><br></pre></td></tr></table></figure><p>MySQL 5.7 和之前版本很大区别是在安装后会自动为 root@localhost 用户设置一个随机初始密码，之前的版本密码为空的。那如何找到这个初始密码呢？网上很多文章说初始密码在这个文件中 /root/.mysql_secret 我不清楚早前的版本是不是这样，但 MySQL 5.7.11 并不然，而是保持到 error log 文件中。可以通过下面方法找到 MySQL 5.7 root 的初始密码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">结果如下</span><br><span class="line"><span class="number">2017</span>-<span class="number">05</span>-<span class="number">12</span>T09:<span class="number">41</span>:<span class="number">44.686145</span>Z <span class="number">1</span> [Note] A temporary password <span class="keyword">is</span> generated <span class="keyword">for</span> root@localhos<span class="variable">t:</span> U4ygpaZyy(<span class="keyword">up</span></span><br></pre></td></tr></table></figure><p>其中 U4ygpaZyy(up 就是密码。现在立即用这个密码登录 MySQL 并且修改密码（MySQL 5.7 版本对密码的安全性要求很严格，必须至少包含1个大写字母、1个小写字母、1个数字和1个特殊字符，长度不得小于8个字符）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'Aliyun2017.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> Host=<span class="string">'%'</span> <span class="keyword">where</span> HOST=<span class="string">'localhost'</span> <span class="keyword">and</span> <span class="keyword">User</span>=<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">CONCAT</span>(<span class="string">'User: '''</span>,<span class="keyword">user</span>,<span class="string">'''@'''</span>,host,<span class="string">''';'</span>) <span class="keyword">AS</span> <span class="keyword">query</span> <span class="keyword">FROM</span> mysql.user;</span><br><span class="line"></span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>mysql5.7 重置密码使用这个语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'abcabc'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>ps：如果 mysql 授权远程访问之后，访问还是失败。可能是由于防火墙和 selinux 没有关闭到底。<br>Centos7 关闭防火墙和 selinux 命令如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld<span class="selector-class">.service</span> </span><br><span class="line"></span><br><span class="line">systemctl stop firewalld<span class="selector-class">.service</span> </span><br><span class="line"></span><br><span class="line">sed -<span class="selector-tag">i</span> <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config</span><br><span class="line">setenforce <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Navicat-远程连接阿里云上的-mysql"><a href="#Navicat-远程连接阿里云上的-mysql" class="headerlink" title="Navicat 远程连接阿里云上的 mysql"></a>Navicat 远程连接阿里云上的 mysql</h3><p>在 mysql 中输入命令，开启远程连接权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'YOUR_PASSWORD'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><p>YOUR_PASSWORD 替换成你的mysql连接密码。</p><p>该命令的具体意思可见阿里云官方说法：<a href="https://help.aliyun.com/knowledge_detail/40792.html" target="_blank" rel="noopener">官方</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">重启 mysql 服务</span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h3 id="PHP7-最新版安装"><a href="#PHP7-最新版安装" class="headerlink" title="PHP7 最新版安装"></a>PHP7 最新版安装</h3><p>安装 REMI 仓库之前，首先安装 EPEL 仓库，因为 REMI 中的一些包依赖于 EPEL<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https:<span class="regexp">//</span>dl.fedoraproject.org<span class="regexp">/pub/</span>epel<span class="regexp">/epel-release-latest-7.noarch.rpm</span></span><br></pre></td></tr></table></figure></p><p>接下来安装 REMI 仓库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> <span class="keyword">http</span>://rpms.remirepo.net/<span class="keyword">enterprise</span>/remi-<span class="keyword">release</span><span class="number">-7.</span>rpm</span><br></pre></td></tr></table></figure><p>再安装 yum 的配置管理工具，方便配置 yum 仓库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> yum-utils</span><br></pre></td></tr></table></figure><p>启用 remi-php71 仓库</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-<span class="built_in">config</span>-manager <span class="comment">--enable remi-php71</span></span><br></pre></td></tr></table></figure><p>最后，安装 PHP</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install php</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">find</span> / -type f -name <span class="string">"php"</span> -print</span><br><span class="line"></span><br><span class="line">/opt/remi/php71/root/usr/bin/php</span><br></pre></td></tr></table></figure><p>查看 PHP 版本以及扩展信息</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php <span class="comment">--v</span></span><br><span class="line">php <span class="comment">--m</span></span><br></pre></td></tr></table></figure><p>安装 PHP-FPM，简单理解，PHP-FPM 是 FastCGI 的管理器，FastCGI 是处理 Nginx 转发过来的 PHP 脚本的。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> php-fpm</span><br></pre></td></tr></table></figure><h3 id="配置-nginx-支持-php"><a href="#配置-nginx-支持-php" class="headerlink" title="配置 nginx 支持 php"></a>配置 nginx 支持 php</h3><p>将默认的配置文件作为配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> /etc/nginx/<span class="keyword">conf</span>.d/default.<span class="keyword">conf</span> <span class="keyword">abc</span>.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>进入nginx配置文件进行修改</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>abc.conf</span><br><span class="line"></span><br><span class="line">找到<span class="number">80</span>端口的配置，加入index.php</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">加入下面的配置代码，如果已经存在的，去掉注释，并修改,其中<span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html是web根目录的地址，可以根据自己的喜好进行选择，我一般放在<span class="regexp">/var/</span>www下</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html;</span><br><span class="line">    fastcgi_pass   <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1，已经存在的去掉注释就好了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cgi<span class="selector-class">.fix_pathinfo</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>重启nginx，启动php-fpm</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">restart</span> <span class="selector-tag">nginx</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">php-fpm</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p>设置php-fpm开机自启动</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> php-fpm.service</span><br><span class="line"></span><br><span class="line">netstat -antp</span><br></pre></td></tr></table></figure><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> redis php-pecl-redis</span><br></pre></td></tr></table></figure><p>把Redis添加到开机启动服务中：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service redis start</span><br><span class="line"></span><br><span class="line">systemctl <span class="builtin-name">enable</span> redis.service</span><br></pre></td></tr></table></figure><p>检查Redis是否运行：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">is</span>-active redis.service</span><br></pre></td></tr></table></figure><p>重启php-fpm：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service php-fpm restart</span></span><br></pre></td></tr></table></figure><h3 id="源码编译安装-Git"><a href="#源码编译安装-Git" class="headerlink" title="源码编译安装 Git"></a>源码编译安装 Git</h3><p>centos 自带 git，7.x版本自带 git 1.8.3.1<br>在 Linux 中有的需要先卸载原来自带的 Git</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="builtin-name">remove</span> git</span><br></pre></td></tr></table></figure><p>安装 <a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">Git</a> 的依赖包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> dh-autoreconf curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel</span><br></pre></td></tr></table></figure><p>为了能支持多种格式的文档也需要安装一些额外的包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> asciidoc xmlto docbook2X getopt</span><br></pre></td></tr></table></figure><p>下载 Git 源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https:<span class="regexp">//</span>www.kernel.org<span class="regexp">/pub/</span>software<span class="regexp">/scm/gi</span>t<span class="regexp">/git-2.9.4.tar.gz</span></span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xzvf</span> <span class="selector-tag">git-2</span><span class="selector-class">.9</span><span class="selector-class">.4</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>注意：如果使用的 Fedora 系列的操作系统需要设置软连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/db2x_docbook2texi /u</span>sr<span class="regexp">/bin/</span>docbook2x-texi</span><br></pre></td></tr></table></figure><p>进入解压目录编译安装（时间比较漫长）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd git-2.9.4</span><br><span class="line">./configure <span class="comment">--prefix=/usr/local/git</span></span><br><span class="line">sudo make all doc info</span><br><span class="line">sudo make <span class="keyword">install</span> <span class="keyword">install</span>-doc <span class="keyword">install</span>-html <span class="keyword">install</span>-info</span><br></pre></td></tr></table></figure><p>添加 Git 到环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo echo <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc<span class="built_in">/profile </span></span><br><span class="line">sudo source /etc/profile</span><br><span class="line"></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h3><p><a href="http://www.jianshu.com/p/1e51985b46dd" target="_blank" rel="noopener">（yum安装nginx和mysql，php7源码安装）</a><br><a href="http://www.jianshu.com/p/907c7edba13f" target="_blank" rel="noopener">centos上安装lnmp环境</a><br><a href="https://segmentfault.com/a/1190000003931716" target="_blank" rel="noopener">不可不知的centos7 firewalld 防火墙的使用</a><br><a href="http://53cto.blog.51cto.com/9899631/1841404" target="_blank" rel="noopener">CentOS7 安装 Mysql 5.7,密码查看与修改</a><br><a href="https://segmentfault.com/a/1190000007183895" target="_blank" rel="noopener">Centos 7.2 安装配置</a></p>]]></content>
    
    <summary type="html">
    
      Centos 7 下安装 LNMP 官方最新版
    
    </summary>
    
    
      <category term="lnmp" scheme="http://blog.jybx.me/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>laravel-faker</title>
    <link href="http://blog.jybx.me/laravel-faker.html"/>
    <id>http://blog.jybx.me/laravel-faker.html</id>
    <published>2017-03-05T00:09:50.000Z</published>
    <updated>2017-12-05T13:12:14.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Laravel-5-使用-Seeder-amp-Faker-生成假数据"><a href="#Laravel-5-使用-Seeder-amp-Faker-生成假数据" class="headerlink" title="Laravel 5 使用 Seeder &amp; Faker 生成假数据"></a>Laravel 5 使用 Seeder &amp; Faker 生成假数据</h1><blockquote><p>还在为手动填写假数据而头疼吗？Laravel 使用 Faker 可以很灵活的添加所需的特定格式的数据，可以通过 tinker 命令行预览、保存测试数据，也可以直接在 Seed 中写好相应代码一键生成。所有的 seeder 文件在 database/seeds 目录下。</p></blockquote><h1 id="Faker-是一个-PHP-库，为您生成假数据"><a href="#Faker-是一个-PHP-库，为您生成假数据" class="headerlink" title="Faker 是一个 PHP 库，为您生成假数据"></a>Faker 是一个 PHP 库，为您生成假数据</h1><blockquote><p>laravel 框架默认引入了 <a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener">fzaninotto/Faker</a> 包，这个包能让我们快速的生成一些测试数据。<a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider/zh_CN" target="_blank" rel="noopener">本地化</a></p><p><a href="https://packagist.org/packages/fzaninotto/faker" target="_blank" rel="noopener">packages</a><br>composer require fzaninotto/faker</p></blockquote><h2 id="创建-seeder-文件"><a href="#创建-seeder-文件" class="headerlink" title="创建 seeder 文件"></a>创建 seeder 文件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:seeder</span> <span class="selector-tag">UserTableSeeder</span></span><br></pre></td></tr></table></figure><h2 id="用-laracasts-generators-包创建文件"><a href="#用-laracasts-generators-包创建文件" class="headerlink" title="用 laracasts/generators 包创建文件"></a>用 laracasts/generators 包创建文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：通过Composer安装</span></span><br><span class="line">composer <span class="keyword">require</span> laracasts/generators --dev</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2：添加服务提供商</span></span><br><span class="line"><span class="comment">// 添加提供者 app/Providers/AppServiceProvider.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;environment() == <span class="string">'local'</span>) &#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;app-&gt;register(<span class="string">'Laracasts\Generators\GeneratorsServiceProvider'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>命令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">make</span><span class="selector-pseudo">:migration</span><span class="selector-pseudo">:schema</span></span><br><span class="line"><span class="selector-tag">make</span><span class="selector-pseudo">:migration</span><span class="selector-pseudo">:pivot</span></span><br><span class="line"><span class="selector-tag">make</span><span class="selector-pseudo">:seed</span></span><br></pre></td></tr></table></figure><p><strong>迁移与模式</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="string">make:</span><span class="string">migration:</span>schema create_articles_table --schema=<span class="string">"title:string, conent:text, published_at:timestamp"</span></span><br></pre></td></tr></table></figure><p><strong>创建如下文件内容</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">CreateArticlesTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        Schema::create(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span></span><br><span class="line"><span class="php">            $table-&gt;increments(<span class="string">'id'</span>);</span></span><br><span class="line"><span class="php">            $table-&gt;string(<span class="string">'title'</span>);</span></span><br><span class="line"><span class="php">            $table-&gt;text(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="php">            $table-&gt;timestamp(<span class="string">'published_at'</span>);</span></span><br><span class="line"><span class="php">            $table-&gt;timestamps();</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        Schema::drop(<span class="string">'articles'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="string">make:</span><span class="string">migration:</span>schema remove_published_at_from_articles_table --schema=<span class="string">"published_at:timestamp"</span></span><br></pre></td></tr></table></figure><p><strong>创建如下文件内容</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RemovePublishedAtFromArticlesTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        Schema::table(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span></span><br><span class="line"><span class="php">            $table-&gt;dropColumn(<span class="string">'published_at'</span>);</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        Schema::table(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span></span><br><span class="line"><span class="php">            $table-&gt;timestamp(<span class="string">'published_at'</span>);</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>多对多关系</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:migration</span><span class="selector-pseudo">:pivot</span> <span class="selector-tag">tags</span> <span class="selector-tag">articles</span></span><br></pre></td></tr></table></figure><p><strong>创建如下文件内容</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">CreateArticleTagPivotTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        Schema::create(<span class="string">'article_tag'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span></span><br><span class="line"><span class="php">            $table-&gt;integer(<span class="string">'article_id'</span>)-&gt;unsigned()-&gt;index();</span></span><br><span class="line"><span class="php">            $table-&gt;foreign(<span class="string">'article_id'</span>)-&gt;references(<span class="string">'id'</span>)-&gt;on(<span class="string">'articles'</span>)-&gt;onDelete(<span class="string">'cascade'</span>);</span></span><br><span class="line"><span class="php">            $table-&gt;integer(<span class="string">'tag_id'</span>)-&gt;unsigned()-&gt;index();</span></span><br><span class="line"><span class="php">            $table-&gt;foreign(<span class="string">'tag_id'</span>)-&gt;references(<span class="string">'id'</span>)-&gt;on(<span class="string">'tags'</span>)-&gt;onDelete(<span class="string">'cascade'</span>);</span></span><br><span class="line"><span class="php">            $table-&gt;primary([<span class="string">'article_id'</span>, <span class="string">'tag_id'</span>]);</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        Schema::drop(<span class="string">'article_tag'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="用-laravel-test-factory-helper-包自动生成属性"><a href="#用-laravel-test-factory-helper-包自动生成属性" class="headerlink" title="用 laravel-test-factory-helper 包自动生成属性"></a>用 laravel-test-factory-helper 包自动生成属性</h2><blockquote><p>该软件包可帮助您从现有的模型/数据库结构生成模型工厂，以便更快速地测试Laravel应用程序</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> mpociot/laravel-test-factory-helper</span><br></pre></td></tr></table></figure><p><strong>config/app.php 添加服务提供商</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mpociot\LaravelTestFactoryHelper\TestFactoryHelperServiceProvider::<span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p><strong>执行</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// database/factory/ModelFactory.php 模型工厂文件会自动生成各个模型对应字段数据</span></span><br><span class="line">php artisan test-factory-helper:<span class="keyword">generate</span></span><br></pre></td></tr></table></figure><h2 id="安全保证"><a href="#安全保证" class="headerlink" title="安全保证"></a>安全保证</h2><p>在 .env 文件中的 APP_ENV 配置通常可以配置以下三个值</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// local 代表本地环境</span><br><span class="line">APP_ENV=local </span><br><span class="line">// testing 代码测试环境</span><br><span class="line">APP_ENV=testing </span><br><span class="line">// production 代表线上环境</span><br><span class="line">APP_ENV=production</span><br></pre></td></tr></table></figure><h2 id="执行-seed"><a href="#执行-seed" class="headerlink" title="执行 seed"></a>执行 seed</h2><blockquote><p>使用 php artisan make:seeder 命令来创建数据时，会调用 database/seeders 目录下的 DatabaseSeeder.php 文件中的 run() 方法。生成数据的代码可以放在 run() 中，既支持 DB 操作，也支持 Factory 方法，在 run() 中使用 call() 函数一次性来添加操作方法。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Seeder</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseSeeder</span> <span class="keyword">extends</span> <span class="title">Seeder</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (App::environment(<span class="string">'production'</span>, <span class="string">'staging'</span>))</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 线上环境</span></span></span><br><span class="line"><span class="php">            <span class="keyword">exit</span>(<span class="string">'你不会是想被开除吧 ?'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        </span></span><br><span class="line"><span class="php">        DB::table(<span class="string">'users'</span>)-&gt;truncate();</span></span><br><span class="line"><span class="php">        DB::table(<span class="string">'articles'</span>)-&gt;truncate();</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;call(UserTableSeeder::class);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        factory(\App\Article::class,<span class="number">50</span>)-&gt;create();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 直接在这写</span></span></span><br><span class="line">        /*\App\User::truncate();</span><br><span class="line"><span class="php">        factory(\App\User::class,<span class="number">20</span>)-&gt;create();*/</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行这一步如果出现错误: 出现 [ReflectionException] Class does not exist 的提示。</span></span><br><span class="line"><span class="comment">// 在终端中执行 composer dump-autoload 即可</span></span><br><span class="line">php artisan <span class="string">db:</span>seed</span><br></pre></td></tr></table></figure><h2 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h2><p><a href="http://www.yzgod.com/?tag=laravel" target="_blank" rel="noopener">叶子天堂互联</a><br><a href="https://laravel.com/docs/5.4/configuration" target="_blank" rel="noopener">检测当前环境</a><br><a href="https://laravel-china.org/topics/109" target="_blank" rel="noopener">有用的数据填充</a></p>]]></content>
    
    <summary type="html">
    
      Laravel 5 使用 Seeder &amp; Faker 生成假数据
    
    </summary>
    
      <category term="laravel" scheme="http://blog.jybx.me/categories/laravel/"/>
    
    
      <category term="laravel" scheme="http://blog.jybx.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Browsersync</title>
    <link href="http://blog.jybx.me/browsersync.html"/>
    <id>http://blog.jybx.me/browsersync.html</id>
    <published>2016-12-01T10:08:38.000Z</published>
    <updated>2017-02-04T04:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Browsersync-浏览器同步"><a href="#Browsersync-浏览器同步" class="headerlink" title="Browsersync 浏览器同步"></a>Browsersync 浏览器同步</h1><blockquote><p>Browsersync 能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less 等）并自动刷新页面。更重要的是  Browsersync 可以同时在 PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有 pc、ipad、iphone、android 等设备，同时打开了您需要调试的页面，当您使用 browsersync 后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您 30% 的工作效率。– <a href="http://www.browsersync.cn/" target="_blank" rel="noopener">引自官方网站</a></p></blockquote><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>BrowserSync 是基于 Node.js 的, 是一个 Node 模块， 如果您想要快速使用它，也许您需要先安装一下 Node.js <a href="https://nodejs.org/download/" target="_blank" rel="noopener">安装适用于Mac OS，Windows和Linux。</a></p><h2 id="安装-BrowserSync"><a href="#安装-BrowserSync" class="headerlink" title="安装 BrowserSync"></a>安装 BrowserSync</h2><p>您可以选择从 Node.js 的包管理（NPM）库中 安装 BrowserSync。打开一个终端窗口，运行以下命令：<code>sudo npm install -g browser-sync</code></p><p>安装时可能出现 <code>(node:11882) Warning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit</code> 错误，安装最新版本 node</p><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p><code>browser-sync --version</code></p><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>创建文件夹并进入<br><code>npm init</code> 一路回车<br><code>npm install --save-dev browser-sync</code></p><h2 id="启动-BrowserSync"><a href="#启动-BrowserSync" class="headerlink" title="启动 BrowserSync"></a>启动 BrowserSync</h2><p>如果您想要监听 .css 文件, 您需要使用服务器模式。 BrowserSync 将启动一个小型服务器，并提供一个 URL 来查看您的网站。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="params">--files</span> 路径是相对于运行该命令的项目（目录） </span><br><span class="line">browser-sync start <span class="params">--server</span> <span class="params">--files</span> <span class="string">"css/*.css"</span></span><br></pre></td></tr></table></figure><p>如果您需要监听多个类型的文件，您只需要用逗号隔开。例如我们再加入一个 .html 文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="params">--files</span> 路径是相对于运行该命令的项目（目录） </span><br><span class="line">browser-sync start <span class="params">--server</span> <span class="params">--files</span> <span class="string">"css/*.css, *.html"</span></span><br><span class="line"><span class="string">//</span> 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意<span class="string">.css</span> 或 <span class="string">.html</span>文件。 </span><br><span class="line">browser-sync start <span class="params">--server</span> <span class="params">--files</span> <span class="string">"**/*.css, **/*.html"</span></span><br></pre></td></tr></table></figure><p>如果您已经有其他本地服务器环境 PHP 或类似的，您需要使用代理模式。 BrowserSync 将通过代理 URL(localhost:3000) 来查看您的网站。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 主机名可以是<span class="built_in">ip</span>或域名</span><br><span class="line"><span class="keyword">browser-sync </span>start --proxy <span class="string">"主机名"</span> <span class="string">"css/*.css"</span></span><br></pre></td></tr></table></figure><p>我在这里执行<br><code>browser-sync start --server [html] --files &quot;html/css/*.css, html/*.html&quot;</code></p><p><img src="http://api.jybx.me/htmls.png" alt="htmls"></p><h2 id="配置界面"><a href="#配置界面" class="headerlink" title="配置界面"></a>配置界面</h2><p>浏览器地址：<code>http://localhost:3001</code></p><p><img src="http://api.jybx.me/brow.png" alt="brow"></p><p>Debug 调试（选择哪个链接，变成绿色）</p><p><img src="http://api.jybx.me/debug.png" alt="debug"></p><p><img src="http://api.jybx.me/target.png" alt="target"></p><h2 id="–tunnel：与所有人同步"><a href="#–tunnel：与所有人同步" class="headerlink" title="–tunnel：与所有人同步"></a>–tunnel：与所有人同步</h2><p><code>browser-sync start --server [html] --files &quot;html/css/*.css, html/*.html&quot; --tunnel</code></p><p><img src="http://api.jybx.me/tunnel.png" alt="tunnel"></p><p>在同步之前需要安装 <code>npm install -g localtunnel</code><br><a href="https://localtunnel.github.io/www/" target="_blank" rel="noopener">Localtunnel</a></p><p>打开 <code>https://tngvbwigwn.localtunnel.me</code> 可以在别人的浏览器上同步打开</p><h2 id="Browsersync-整合到-Gulp-任务"><a href="#Browsersync-整合到-Gulp-任务" class="headerlink" title="Browsersync 整合到 Gulp 任务"></a>Browsersync 整合到 Gulp 任务</h2><p><code>npm install browser-sync gulp --save-dev</code><br>然后在 Glupfile.js 里配置任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create(); <span class="comment">//引入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Static server</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//注册任务</span></span><br><span class="line">    browserSync.init(&#123; <span class="comment">//调用API</span></span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: <span class="string">"./html"</span> <span class="comment">//监听当前路径</span></span><br><span class="line">        &#125;,</span><br><span class="line">        files: [<span class="string">'html/ndex.html'</span>, <span class="string">'html/css/*.css'</span>] <span class="comment">//监听整个项目</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or...</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        proxy: <span class="string">"yourlocal.dev"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://browsersync.io/docs/gulp/" target="_blank" rel="noopener">详细例子传送门</a></p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p><a href="https://segmentfault.com/a/1190000003787713" target="_blank" rel="noopener">原文引用</a><br><code>browser-sync init</code><br>件，这个是 BrowserSync 的配置文件。有关 BrowserSync 的所有运行配置都在这个里面，我们可以 <a href="https://browsersync.io/docs/options/" target="_blank" rel="noopener">参考官方文档</a> 进行修改，然后以这个配置文件来运行 BrowserSync：<br><code>browser-sync start --config bs-config .js</code></p>]]></content>
    
    <summary type="html">
    
      Browsersync 能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less 等）并自动刷新页面。更重要的是  Browsersync 可以同时在 PC、平板、手机等设备下进项调试。
    
    </summary>
    
      <category term="npm" scheme="http://blog.jybx.me/categories/npm/"/>
    
      <category term="browsersync" scheme="http://blog.jybx.me/categories/npm/browsersync/"/>
    
      <category term="gulp" scheme="http://blog.jybx.me/categories/npm/browsersync/gulp/"/>
    
    
      <category term="npm" scheme="http://blog.jybx.me/tags/npm/"/>
    
      <category term="browsersync" scheme="http://blog.jybx.me/tags/browsersync/"/>
    
      <category term="gulp" scheme="http://blog.jybx.me/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://blog.jybx.me/git.html"/>
    <id>http://blog.jybx.me/git.html</id>
    <published>2016-11-27T06:59:05.000Z</published>
    <updated>2016-12-17T11:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-学习笔记"><a href="#Git-学习笔记" class="headerlink" title="Git 学习笔记"></a>Git 学习笔记</h1><blockquote><p>GIT 是一款免费的、开源的、分布式的版本控制系统。每一个 GIT 克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力。其最大特色就是“分支”及“合并”操作快速、简便。支持离线工作，GIT 是整个项目范围的原子提交，而且 GIT 中的每个工作树都包含一个具有完整项目历史的仓库。</p></blockquote><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p><a href="https://git-scm.com/download/" target="_blank" rel="noopener">https://git-scm.com/download/</a><br>如果你不想安装，可以访问 <a href="http://www.hubwiz.com/course/55d301543ad79a1b05dcc4e2/" target="_blank" rel="noopener">http://www.hubwiz.com/course/55d301543ad79a1b05dcc4e2/</a> 这个链接直接练习。</p><h2 id="查看-Git-版本"><a href="#查看-Git-版本" class="headerlink" title="查看 Git 版本"></a>查看 Git 版本</h2><p><code>git --version</code></p><h2 id="创建一个新的-Git-仓库"><a href="#创建一个新的-Git-仓库" class="headerlink" title="创建一个新的 Git 仓库"></a>创建一个新的 Git 仓库</h2><p>创建新文件夹，打开，然后执行 <code>git init</code> 命令用来创建一个新的 git 仓库，git 大部分命令都是在 git 仓库下运行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 将当前目录转换为 git 仓库</span></span><br><span class="line">git init &lt;<span class="keyword">directory&gt; </span><span class="comment"># 将特定目录转换为 git 仓库</span></span><br><span class="line">git init --<span class="keyword">bare </span>&lt;<span class="keyword">directory&gt; </span> <span class="comment"># 指定目录创建一个空的（裸的）git 仓库，它不包含工作目录，并且不能提交编辑和提交修改，该仓库主要用于远端服务器管理代码，保存 git 历史提交的版本信息，防止冲突。</span></span><br><span class="line">git <span class="keyword">clone </span>[url] <span class="comment"># 复制一个存在的 git 仓库到本地</span></span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/q/1010000004683286" target="_blank" rel="noopener">git init 和 git init –bare 的区别？</a></p><h2 id="Git-的目录结构"><a href="#Git-的目录结构" class="headerlink" title="Git 的目录结构"></a>Git 的目录结构</h2><p><img src="http://api.jybx.me/git-init.png" alt="git-init"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HEAD <span class="comment"># 指向 Git 项目当前分支的头指针</span></span><br><span class="line"><span class="built_in">config</span> <span class="comment"># Git 项目配置信息</span></span><br><span class="line">hooks <span class="comment"># 默认的 'hooks' 脚本，被特定事件发生前后触发。</span></span><br><span class="line">objects <span class="comment"># Git 的数据对象，包括：commits, trees, blobs, tags。</span></span><br><span class="line"><span class="keyword">branches </span><span class="comment"># Git 项目分支信息，新版 Git 已经不再使用该目录</span></span><br><span class="line">description <span class="comment"># Git 项目描述信息</span></span><br><span class="line">info <span class="comment"># 里面含一个 exclude 文件，指 Git 项目要忽略的文件。</span></span><br><span class="line">refs <span class="comment"># 指向所有 Git 项目分支的指针</span></span><br></pre></td></tr></table></figure><p>所有的分支指针保存在 .git/refs/heads 目录下，HEAD 在 .git/HEAD 目录下，标签在 .git/refs/tags 目录下。</p><h2 id="忽略不必要的文件-敏感信息"><a href="#忽略不必要的文件-敏感信息" class="headerlink" title="忽略不必要的文件/敏感信息"></a>忽略不必要的文件/敏感信息</h2><p>在 Git 工作区的根目录下创建一个特殊的 <code>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置语法</span></span><br><span class="line"><span class="comment"># 以斜杠“/”开头表示目录；</span></span><br><span class="line"><span class="comment"># 以星号“*”通配多个字符；</span></span><br><span class="line"><span class="comment"># 以问号“?”通配单个字符</span></span><br><span class="line"><span class="comment"># 以方括号“[]”包含单个字符的匹配列表；</span></span><br><span class="line"><span class="comment"># 以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</span></span><br><span class="line"><span class="comment"># &#123;!ab&#125;：必须不是此类型</span></span><br><span class="line"><span class="comment"># &#123;ab,bb,cx&#125;：代表ab,bb,cx中任一类型即可</span></span><br><span class="line"><span class="comment"># [abc]：代表a,b,c中任一字符即可</span></span><br><span class="line"><span class="comment"># [ ^abc]：代表必须不是a,b,c中任一字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此为注释 – 将被 Git 忽略</span></span><br><span class="line">*<span class="string">.a</span>        <span class="comment"># 忽略所有 .a 结尾的文件</span></span><br><span class="line">!test.json <span class="comment"># 但 test.json 除外</span></span><br><span class="line"><span class="string">/TODO</span>      <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件    </span></span><br><span class="line">build/     <span class="comment"># 忽略目录下的所有文件</span></span><br><span class="line">doc/*<span class="string">.txt</span>  <span class="comment"># 会忽略 doc/ 文件夹下的所有以 .txt 结尾的 </span></span><br><span class="line"><span class="string">.DS_Store</span></span><br><span class="line"><span class="string">.idea</span></span><br></pre></td></tr></table></figure><h2 id="Git-工作流"><a href="#Git-工作流" class="headerlink" title="Git 工作流"></a>Git 工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。<br><img src="http://api.jybx.me/trees.png" alt="trees"></p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p><code>git config</code> 命令用来配置本地安装的 git<br>Git的设置文件为 <code>.gitconfig</code> 它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.gitconfig # 查看当前本地配置</span><br><span class="line">git<span class="built_in"> config </span>--list # 显示当前的 Git 配置</span><br><span class="line">git<span class="built_in"> config </span>-e [--global] # 编辑 Git 配置文件</span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>[--global] user.name <span class="string">"[name]"</span> # 配置当前仓库修改提交作者名</span><br><span class="line">git<span class="built_in"> config </span>[--global] user.email <span class="string">"[email address]"</span> # 配置本地所有仓库提交 email 地址</span><br><span class="line">git<span class="built_in"> config </span>[--global] color.ui <span class="literal">true</span> # 打开所有的默认终端着色</span><br><span class="line">git<span class="built_in"> config </span>[--global] core.editor vim # 设置默认编辑器</span><br><span class="line">git<span class="built_in"> config </span>[--global] alias.co checkout # 设置别名，使用如下 git co</span><br><span class="line">git<span class="built_in"> config </span>[--global] alias.ci commit #命令用来将本地跟踪的修改添加到本地仓库历史</span><br><span class="line">git<span class="built_in"> config </span>[--global] alias.st status # 命令用于查看当前工作区和暂存区的状态信息</span><br><span class="line">git<span class="built_in"> config </span>[--global] alias.br branch # 命令用于查看当前分支</span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>[--global] --unset alias.br # 删除别名</span><br></pre></td></tr></table></figure><p><a href="自定义 Git - 配置 Git">更多自定义 Git - 配置 Git</a></p><h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><p><code>git add</code> 你可以提出更改（把它们添加到暂存区）<br><code>git commit</code> 命令用来将本地修改添加到本地仓库历史，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> [file1] [file2] <span class="comment"># 添加指定文件到暂存区</span></span></span><br><span class="line"><span class="bash">git add [dir] <span class="comment"># 添加指定目录到暂存区，包括子目录</span></span></span><br><span class="line"><span class="bash">git add . <span class="comment"># 添加当前目录的所有文件到暂存区</span></span></span><br><span class="line"><span class="bash">git add prefix_* <span class="comment"># 匹配以 prefix 开头的所有文件</span></span></span><br><span class="line"><span class="bash">git add *.js <span class="comment"># 匹配以 js 结尾的所有文件</span></span></span><br><span class="line"><span class="bash">git add -p <span class="comment"># 添加每个变化前，都会要求确认</span></span></span><br><span class="line"><span class="bash">git add -u <span class="comment"># 只加修改过的档案, 新增的档案不加入</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">git commit -m [message] <span class="comment"># 提交暂存区到仓库区</span></span></span><br><span class="line"><span class="bash">git commit [file1] [file2] ... -m [message] <span class="comment"># 提交暂存区的指定文件到仓库区</span></span></span><br><span class="line"><span class="bash">git commit -a <span class="comment"># 提交工作区自上次 commit 之后的变化，直接到仓库区</span></span></span><br><span class="line"><span class="bash">git commit -a -m <span class="string">'commit -message'</span> <span class="comment"># 将所有修改过得档案都 commit, 不需要执行 git-add 命令 .-a 参数就是已经自动执行 git-add 命令</span></span></span><br><span class="line"><span class="bash">git commit -a -v <span class="comment"># -v 可以看到档案哪些内容有被更改, -a 把所有修改的档案都 commit</span></span></span><br><span class="line"><span class="bash">git commit -v <span class="comment"># 提交时显示所有 diff 信息</span></span></span><br><span class="line"><span class="bash">git commit --amend -m [message] <span class="comment"># 使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span></span><br><span class="line"><span class="bash">git commit --amend [file1] [file2] ... <span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span></span><br><span class="line"><span class="bash">git commit --amend --no-edit <span class="comment"># 加入 --no-edit 标记会修复提交但不修改提交信息</span></span></span><br></pre></td></tr></table></figure><h2 id="删除文件-改名文件"><a href="#删除文件-改名文件" class="headerlink" title="删除文件/改名文件"></a>删除文件/改名文件</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm <span class="string">[file1]</span> <span class="string">[file2]</span> ... # 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">git rm <span class="string">[r]</span> --cached <span class="string">[file]</span> # 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line"></span><br><span class="line">git mv <span class="string">[file-original]</span> <span class="string">[file-renamed]</span> # 改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure><h2 id="清除没有在-Git-库中的文件"><a href="#清除没有在-Git-库中的文件" class="headerlink" title="清除没有在 Git 库中的文件"></a>清除没有在 Git 库中的文件</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> clean -nd <span class="comment"># 查看当前多的文件和目录或将要被删除的文件和目录</span></span><br><span class="line">git clean -fd <span class="comment"># 将多的文件和目录从 git 目录里删除</span></span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p><code>git log</code> 查看历史记录<br><img src="http://api.jybx.me/gitlog.png" alt="gitlog"><br>git 一直停留在 log 模式，这时只需要按 q 键即可退出。如果不退出，在按完 q 键后回车即可。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 显示有变更的文件</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">log</span> <span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="keyword">log</span> --<span class="keyword">stat</span> <span class="comment"># 会显示在每个提交 (commit) 中哪些文件被修改了, 这些文件分别添加或删除了多少行内容</span></span><br><span class="line">git <span class="keyword">log</span> -<span class="number">2</span> <span class="comment"># 查看最近2次的提交日志</span></span><br><span class="line">git <span class="keyword">log</span> -p <span class="comment"># 除了 git log 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。</span></span><br><span class="line">git <span class="keyword">log</span> --oneline <span class="comment"># 查看历史提交日志，单行显示</span></span><br><span class="line">git <span class="keyword">log</span> --pretty=oneline <span class="comment"># 查看版本号,同上（版本号更详细）</span></span><br><span class="line">git <span class="keyword">log</span> --graph --pretty=oneline --abbrev-commit <span class="comment"># 可以看到分支的合并情况(简化版)</span></span><br><span class="line">git <span class="keyword">log</span> --graph <span class="comment"># 分支合并图(详细图) 同 git log</span></span><br><span class="line">git <span class="keyword">log</span> -S [keyword] <span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">git <span class="keyword">log</span> [tag] HEAD --pretty=<span class="keyword">format</span>:%s <span class="comment"># 显示某个 commit 之后的所有变动，每个 commit 占据一行</span></span><br><span class="line">git <span class="keyword">log</span> [tag] HEAD --<span class="keyword">grep</span> feature <span class="comment"># 显示某个 commit 之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">git <span class="keyword">log</span> --follow [file] <span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">git <span class="keyword">log</span> --since=<span class="string">"2 weeks ago"</span> <span class="comment"># 最后这2周的log</span></span><br><span class="line"><span class="comment"># 自定义的 git log 配置</span></span><br><span class="line">git <span class="keyword">log</span> --graph --abbrev-commit --decorate --all --<span class="keyword">format</span>=<span class="keyword">format</span>:<span class="string">'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git shortlog -sn <span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">git blame [file] <span class="comment"># 关于此档案的所有 commit 纪录,显示指定文件是什么人在什么时间修改过(通常找出来谁改动了某个文件里的某行代码会很有用)</span></span><br><span class="line">git blame -C [file] <span class="comment"># 显示内容来自哪个文件</span></span><br><span class="line"></span><br><span class="line">git diff <span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">git diff --cached <span class="comment"># 看看哪些文件将被提交(commit)</span></span><br><span class="line">git diff HEAD <span class="comment"># 显示工作区与当前分支最新 commit 之间的差异</span></span><br><span class="line">git diff [first-branch]...[second-branch] <span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">git diff --shortstat <span class="string">"<span class="subst">@&#123;<span class="number">0</span> day ago&#125;</span>"</span> <span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line"></span><br><span class="line">git show [commit] <span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">git show --name-only [commit] <span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">git show [commit]:[filename] <span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">git show HEAD <span class="comment"># 此版本修改的资料</span></span><br><span class="line">git show HEAD^ <span class="comment"># 前一版修改的资料</span></span><br><span class="line">git show HEAD~<span class="number">4</span> <span class="comment"># 前前前前一版修改的资料</span></span><br><span class="line">git reflog <span class="comment"># 显示当前分支的最近几次提交,记录每一次命令</span></span><br></pre></td></tr></table></figure><h2 id="修正错误的-commit"><a href="#修正错误的-commit" class="headerlink" title="修正错误的 commit"></a>修正错误的 commit</h2><p><code>git reset</code> 命令用来撤销历史中的某次提交，也会撤销其后面的提交历史</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> [<span class="keyword">file</span>] # 重置暂存区的指定文件，与上一次<span class="keyword">commit</span>保持一致，但工作区不变</span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard # 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">git <span class="keyword">reset</span> [<span class="keyword">commit</span>] # 重置当前分支的指针为指定<span class="keyword">commit</span>，同时重置暂存区，但工作区不变</span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^ # 回到上一个版本</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD~2 # 命令将当前分支向前倒退两个提交</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--keep [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--soft * # --soft 参数告诉 Git 重置 HEAD 到另外一个 commit，但也到此为止</span></span><br><span class="line"></span><br><span class="line">git revert [<span class="keyword">commit</span>] # 新建一个<span class="keyword">commit</span>，用来撤销指定 <span class="keyword">commit</span>, 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line"></span><br><span class="line">git checkout [<span class="keyword">file</span>] # 恢复暂存区的指定文件到工作区</span><br><span class="line">git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>] # 恢复某个<span class="keyword">commit</span>的指定文件到暂存区和工作区</span><br><span class="line">git checkout . # 恢复暂存区的所有文件到工作区</span><br><span class="line">git checkout <span class="comment">-- file # 我 git add 增加到暂存区后，接着添加内容，我想通过撤销命令让其回到暂存区后的状态(删除了也可以恢复)</span></span><br></pre></td></tr></table></figure><h2 id="Git-分支理解与应用"><a href="#Git-分支理解与应用" class="headerlink" title="Git 分支理解与应用"></a>Git 分支理解与应用</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="http://api.jybx.me/branches.png" alt="branches"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>dev(分支名) # 创建分支并切换过去,-<span class="keyword">b </span>参数表示创建并切换，相当于 git <span class="keyword">branch </span>dev , git checkout dev</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span># 查看当前所有本地分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-r # 列出所有远程分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-a # 列出所有本地分支和远程分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>[<span class="keyword">branch-name] </span># 新建一个分支，但依然停留在当前分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-m [<span class="keyword">branch-name] </span>[new-<span class="keyword">branch-name] </span># 重命名本地分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>--track [<span class="keyword">branch] </span>[remote-<span class="keyword">branch] </span># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>--set-upstream [<span class="keyword">branch] </span>[remote-<span class="keyword">branch] </span># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line"></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d [<span class="keyword">branch-name] </span># 删除分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D [<span class="keyword">branch-name] </span># 强制删除分支</span><br><span class="line"></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin --delete [<span class="keyword">branch-name] </span># 删除远程分支</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-dr [remote/<span class="keyword">branch] </span># 删除远程分支</span><br><span class="line"></span><br><span class="line"><span class="symbol">git</span> checkout [<span class="keyword">branch-name] </span># 切换到指定分支，并更新工作区</span><br><span class="line"><span class="symbol">git</span> checkout - # 切换到上一个分支</span><br><span class="line"><span class="symbol">git</span> checkout master # 切换回主分支</span><br><span class="line"></span><br><span class="line"><span class="symbol">git</span> merge [<span class="keyword">branch] </span># 合并指定分支到当前分支</span><br><span class="line"><span class="symbol">git</span> cherry-pick [commit] # 选择一个commit，合并进当前分支</span><br><span class="line"><span class="symbol">git</span> merge --no-ff -m <span class="string">'' [branch] # 合并并删除分支,被删除的分支信息还在</span></span><br></pre></td></tr></table></figure><h2 id="处理合并冲突-Git-merge-conflict"><a href="#处理合并冲突-Git-merge-conflict" class="headerlink" title="处理合并冲突 Git merge conflict"></a>处理合并冲突 Git merge conflict</h2><p><img src="http://api.jybx.me/mergerdev.png" alt="mergerdev"><br><code>git diff [fileName]</code> 查看区别<br>编辑查看文件，git 已为我们做好标记区别， 删除你不要的部分并保存，<code>git add [fileName]</code></p><h2 id="代码合并：Merge、Rebase-的选择"><a href="#代码合并：Merge、Rebase-的选择" class="headerlink" title="代码合并：Merge、Rebase 的选择"></a>代码合并：Merge、Rebase 的选择</h2><p>git rebase 和 git merge 做的事其实是一样的。它们都被设计来将一个分支的更改并入另一个分支，只不过方式有些不同。<br><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="noopener">查看详细</a></p><h2 id="Git-基础-打标签"><a href="#Git-基础-打标签" class="headerlink" title="Git 基础 - 打标签"></a>Git 基础 - 打标签</h2><p>标签可以针对某一时间点的版本做标记，常用于版本发布。<br><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title"># 列显已有的标签</span></span><br><span class="line"><span class="title">git</span> <span class="keyword">tag</span> <span class="title">&lt;name</span>&gt; <span class="comment"># 新建一个标签，默认为 HEAD，也可以指定一个 commit id</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1.2</span> -m “<span class="number">0.1</span>.<span class="number">2</span>版本” <span class="comment"># 创建附注标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-s</span> <span class="tag">&lt;tagname&gt;</span> -m <span class="string">"blablabla..."</span> <span class="comment"># 可以用PGP签名标签</span></span><br><span class="line">git checkout [tagname] <span class="comment"># 切换到标签</span></span><br><span class="line">git show v0.<span class="number">1.2</span> <span class="comment"># 查看标签的版本信息</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> v0.<span class="number">1.2</span> <span class="comment"># 删除标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1.1</span> <span class="number">9</span>fbc3d0 <span class="comment"># 补打标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-v</span> [<span class="keyword">tag</span>-name] <span class="comment"># （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证</span></span><br><span class="line">git checkout -b [branch] [<span class="keyword">tag</span>] <span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line"></span><br><span class="line">git push origin v0.<span class="number">1.2</span> <span class="comment"># 将 v0.1.2 标签提交到 git 服务器</span></span><br><span class="line">git push origin --tags <span class="comment"># 将本地所有标签一次性提交到 git 服务器</span></span><br><span class="line">git push origin :refs/tags/[tagName] <span class="comment"># 从远程删除</span></span><br><span class="line"></span><br><span class="line">git fetch origin <span class="keyword">tag</span> <span class="title">V1</span>.<span class="number">2</span> <span class="comment"># 精准拉取指定的某一个远程版本</span></span><br></pre></td></tr></table></figure><h2 id="Git-stash-改善工作流"><a href="#Git-stash-改善工作流" class="headerlink" title="Git stash 改善工作流"></a>Git stash 改善工作流</h2><p>备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" target="_blank" rel="noopener">查看廖雪峰 git 教程详情</a></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git stash save <span class="string">"message..."</span> <span class="comment"># 这条命令实际上是 git stash 命令的完整版。git 会基于当前的提交信息自动创建评论。如果你更希望有自定义信息的话（因为它可能和前一个提交没有任何联系）</span></span><br><span class="line">git stash list <span class="comment"># 显示进度列表</span></span><br><span class="line">git stash apply <span class="comment"># 取出来</span></span><br><span class="line">git stash apply stash@&#123;num&#125;</span><br><span class="line">git stash drop <span class="comment"># 从堆栈上移除</span></span><br><span class="line">git stash <span class="keyword">pop</span> stash@&#123;num&#125; <span class="comment"># 取出然后从记录就删除</span></span><br><span class="line"></span><br><span class="line">git stash clear <span class="comment"># 删除所有存储的进度</span></span><br></pre></td></tr></table></figure><h2 id="Git-远程同步"><a href="#Git-远程同步" class="headerlink" title="Git 远程同步"></a>Git 远程同步</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote] <span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">git remote <span class="comment"># 查看远程仓库信息</span></span><br><span class="line">git remote -v <span class="comment"># 显示当前所有远程库的详细信息，显示格式为 远程库名字 url 连接(类型)</span></span><br><span class="line">git remote <span class="keyword">show </span>[remote] <span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">git remote <span class="keyword">add </span>[<span class="keyword">shortname] </span>[url] <span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">git pull [remote] [<span class="keyword">branch] </span><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"></span><br><span class="line">git push [remote] [<span class="keyword">branch] </span><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">git push [remote] --force <span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push [remote] --all <span class="comment"># 推送所有分支到远程仓库</span></span><br></pre></td></tr></table></figure><p>假设现在想增加 3 个远程库地址</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//git.oschina.net<span class="comment">/****/</span>*.git </span><br><span class="line"><span class="symbol">https:</span>//coding.net<span class="comment">/****/</span>*.git</span><br><span class="line"><span class="symbol">https:</span>//github.com<span class="comment">/****/</span>*.git</span><br></pre></td></tr></table></figure><p>首先，先增加第一个地址 <code>git remote add origin &lt;url1&gt;</code><br>然后增加第二个地址 <code>git remote set-url --add origin &lt;url2&gt;</code><br>增加第三个地址 <code>git remote set-url --add origin &lt;url3&gt;</code><br>⋯ 依次类推</p><p>这样就完成了添加多个地址到 origin 库中了，<br>以后只要使用 <code>git push origin master</code> 就可以一次性 push 到 3 个库里面了(使用 <code>git push</code> 也可)</p><h2 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h2><p><code>git archive</code></p><h2 id="Github-贡献代码工作流"><a href="#Github-贡献代码工作流" class="headerlink" title="Github 贡献代码工作流"></a>Github 贡献代码工作流</h2><p><a href="http://www.jianshu.com/p/79454cf00945" target="_blank" rel="noopener">学习参考</a></p><ol><li>先 <code>Fork</code> 到自己的项目保持同步</li><li><code>Clone</code> 到本地，如果项目有依赖包，还要安装依赖包</li><li>进入本地项目目录，upstream 是你取的别名 <code>git remote add upstream [原作者项目url]</code></li><li>保持同步fetch(‘拿来、取来’) <code>git fetch upstream</code>，<code>git checkout master</code>，<code>git merge upstream/master</code>，<code>git push origin master</code>；或者 <code>git pull upstream master</code></li><li>创建分支 <code>git checkout -b [dev-rebase]</code></li><li>修改添加代码</li><li><code>git status</code>，<code>git add.</code>，<code>git commit -m &#39;...&#39;</code></li><li>写了 3 天多后考虑到那边可能更新了代码，执行 <code>git checkout master</code></li><li>同步 <code>git pull upstream master</code></li><li><code>git checkout [dev-rebase]</code></li><li><code>git rebase master</code></li><li>推送 <code>git push origin [dev-rebase]</code></li></ol><h2 id="Github-实用小技巧"><a href="#Github-实用小技巧" class="headerlink" title="Github 实用小技巧"></a>Github 实用小技巧</h2><ol><li>查看每日最新资讯 <code>https://github.com/trending/php</code></li><li>github 根据你 following 定期给你发一封邮件 <code>https://github.com/explore/subscribe</code></li><li>进入到别人的项目中按快捷键 <code>t</code> 进行模糊搜索</li><li><code>s</code> 定位到搜索框</li><li><code>gi</code> =&gt; issues</li><li><code>gp</code> =&gt; pulls</li></ol><h2 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h2><p><a href="https://kingofamani.gitbooks.io/git-teach/content/chapter_2/git_q_and_a.html" target="_blank" rel="noopener">https://kingofamani.gitbooks.io/git-teach/content/chapter_2/git_q_and_a.html</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">http://rogerdudler.github.io/git-guide/index.zh.html</a><br><a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/&amp;prev=search" target="_blank" rel="noopener">https://www.atlassian.com/git/tutorials/setting-up-a-repository/&amp;prev=search</a><br><a href="http://backlogtool.com/git-guide/cn/intro/intro1_1.html" target="_blank" rel="noopener">http://backlogtool.com/git-guide/cn/intro/intro1_1.html</a><br><a href="https://github.com/geeeeeeeeek/git-recipes/blob/master/wiki/catagory.md" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/git-recipes/blob/master/wiki/catagory.md</a></p>]]></content>
    
    <summary type="html">
    
      Git 作为版本管理的一个非常成熟的解决方案，在各个领域都得到了很好的应用。
    
    </summary>
    
      <category term="composer" scheme="http://blog.jybx.me/categories/composer/"/>
    
      <category term="packagist" scheme="http://blog.jybx.me/categories/composer/packagist/"/>
    
      <category term="git" scheme="http://blog.jybx.me/categories/composer/packagist/git/"/>
    
    
      <category term="composer" scheme="http://blog.jybx.me/tags/composer/"/>
    
      <category term="packagist" scheme="http://blog.jybx.me/tags/packagist/"/>
    
      <category term="git" scheme="http://blog.jybx.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Composer -- PHP 依赖管理的新时代</title>
    <link href="http://blog.jybx.me/composer.html"/>
    <id>http://blog.jybx.me/composer.html</id>
    <published>2016-10-02T15:43:39.000Z</published>
    <updated>2016-10-04T07:32:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Composer-–-PHP-依赖管理的新时代"><a href="#Composer-–-PHP-依赖管理的新时代" class="headerlink" title="Composer – PHP 依赖管理的新时代"></a>Composer – PHP 依赖管理的新时代</h1><blockquote><p>Composer 是 PHP 中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。Composer 不是包管理器。是的，它实际上和”包”或者库打交道，但是它是以项目为单位进行管理，把它们安装到你项目中的一个目录（例如 vendor ）。默认情况下它不会以全局的方式安装任何东西。因此，它是一个依赖管理器。</p></blockquote><h2 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h2><p><a href="http://pkg.phpcomposer.com/" target="_blank" rel="noopener">http://pkg.phpcomposer.com/</a></p><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><p>Composer 需要 PHP 5.3.2+ 才能运行。<br>你可以把这个文件放到任何你想放的地方。如果你把它放到你的 PATH 中，你就可以全局访问它了。在类 unix 系统中你甚至可以使它可执行，并且调用的时候不需要 php。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS <span class="string">https:</span><span class="comment">//getcomposer.org/installer | php</span></span><br><span class="line">sudo mv composer.phar <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>composer</span><br></pre></td></tr></table></figure><p>然后，只需要执行 composer 命令来运行 <code>Composer</code>，而不是 php composer.phar。</p><h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><p>下载安装 <a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="noopener">https://getcomposer.org/Composer-Setup.exe</a><br>它将安装最新版本的 Composer ，并设置好系统的环境变量，因此你可以在任何目录下直接使用 composer 命令。</p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>设置系统的环境变量 PATH 并运行安装命令下载 composer.phar 文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">C:</span>\Users\username&gt;cd <span class="string">C:</span>\bin</span><br><span class="line"><span class="string">C:</span>\bin&gt;php -r <span class="string">"readfile('https://getcomposer.org/installer');"</span> | php</span><br></pre></td></tr></table></figure><p>详情请查看手册文档 <a href="http://docs.phpcomposer.com/00-intro.html#Installation-Windows" target="_blank" rel="noopener">点击查看</a></p><h2 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h2><p><code>composer --version</code></p><h2 id="保持-Composer-一直是最新版本"><a href="#保持-Composer-一直是最新版本" class="headerlink" title="保持 Composer 一直是最新版本"></a>保持 Composer 一直是最新版本</h2><p><code>composer selfupdate</code></p><h2 id="在-mac-中用命令行时用-sublime-打开文件"><a href="#在-mac-中用命令行时用-sublime-打开文件" class="headerlink" title="在 mac 中用命令行时用 sublime 打开文件"></a>在 mac 中用命令行时用 sublime 打开文件</h2><p>如果是在默认 shell 下<br><code>sudo ln -s &quot;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&quot; /usr/bin/subl</code></p><p>使用 zsh 的可以使用以下命令<br><code>vi ~/.zshrc</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias <span class="attribute">subl</span>=<span class="string">"'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'"</span></span><br><span class="line">alias <span class="attribute">nano</span>=<span class="string">"subl"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">EDITOR</span>=<span class="string">"subl"</span></span><br></pre></td></tr></table></figure><p><code>source ~/.zshrc</code></p><h2 id="声明依赖"><a href="#声明依赖" class="headerlink" title="声明依赖"></a>声明依赖</h2><p>创建一个文件夹 test<br>在项目目录下创建一个 composer.json 文件，指明依赖，比如，你的项目依赖 monolog：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"require"</span> : &#123;</span><br><span class="line">    <span class="attr">"monolog/monolog"</span> : <span class="string">"1.2.*"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>安装依赖非常简单，只需在项目目录下运行：<br><code>composer install</code></p><h2 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h2><p>Composer 提供了自动加载的特性，只需在你的代码的初始化部分中加入下面一行：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br></pre></td></tr></table></figure><h2 id="列出所有可用的软件包"><a href="#列出所有可用的软件包" class="headerlink" title="列出所有可用的软件包"></a>列出所有可用的软件包</h2><p><code>composer show</code></p><p>展示-参数</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-installed (-i): 列出已安装的依赖包。</span></span><br><span class="line"><span class="ruby">--platform (-p): 仅列出平台软件包（PHP 与它的扩展）。</span></span><br><span class="line"><span class="ruby">--<span class="keyword">self</span> (-s): 仅列出当前项目信息。</span></span><br></pre></td></tr></table></figure><h2 id="composer-常用命令"><a href="#composer-常用命令" class="headerlink" title="composer 常用命令"></a>composer 常用命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">composer list  列出所有可用的命令</span><br><span class="line">composer init   初始化 composer<span class="selector-class">.json</span> 文件(就不劳我们自己费力创建啦)，会要求输入一些信息来描述我们当前的项目，还会要求输入依赖包</span><br><span class="line">composer install  读取 composer<span class="selector-class">.json</span> 内容，解析依赖关系，安装依赖包到vendor目录下</span><br><span class="line">composer update   更新最新的依赖关系到 compsoer<span class="selector-class">.lock</span> 文件，解析最新的依赖关系并且写入composer.lock文件</span><br><span class="line">composer search packagename 搜索包，packagename 替换为你想查找的包名称</span><br><span class="line">composer require packagename 添加对 packagename 的依赖，packagename 可修改为你想要的包名称</span><br><span class="line">composer show packagename</span><br><span class="line">composer self-update 更新 composer<span class="selector-class">.phar</span>  文件自身</span><br><span class="line"></span><br><span class="line">composer command --help 以上所有命令都可以添加 --help选项查看帮助信息</span><br></pre></td></tr></table></figure><p>更多命令行，请看 <a href="http://docs.phpcomposer.com/03-cli.html" target="_blank" rel="noopener">http://docs.phpcomposer.com/03-cli.html</a></p><h2 id="更新-autoloader"><a href="#更新-autoloader" class="headerlink" title="更新 autoloader"></a>更新 autoloader</h2><p>比如在包中加入了一个新的类，需要执行 dump-autoload,而不必执行 install or update<br><code>composer dump-autoload</code></p><h2 id="创建项目-create-project"><a href="#创建项目-create-project" class="headerlink" title="创建项目 create-project"></a>创建项目 create-project</h2><p><code>composer create-project laravel/laravel</code></p><h2 id="模块仓库"><a href="#模块仓库" class="headerlink" title="模块仓库"></a>模块仓库</h2><p><a href="https://packagist.org/" target="_blank" rel="noopener">packagist.org</a> 是 Composer 的仓库，很多著名的 PHP 库都能在其中找到。你也可以提交你自己的作品。</p><h2 id="在-packagist-中提交项目"><a href="#在-packagist-中提交项目" class="headerlink" title="在 packagist 中提交项目"></a>在 packagist 中提交项目</h2><p>在 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 中上传项目：<br>在文件夹中创建 composer.json ，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"yourname/demo"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"this is a test"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"project"</span>,</span><br><span class="line">    <span class="attr">"license"</span>: <span class="string">"mit"</span>,</span><br><span class="line">    <span class="attr">"authors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"yourname"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"yourname@126.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"minimum-stability"</span>: <span class="string">"dev"</span>,</span><br><span class="line">    <span class="attr">"require"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以直接 <code>composer init</code> 进行一步步填写</p><ol><li><p>先登录<br><img src="http://api.jybx.me/submit.png" alt="submit"></p></li><li><p>点击 submit 进行提交你在 github 上传好的项目链接<br><img src="http://api.jybx.me/login.png" alt="login"></p></li></ol><h2 id="composer-整合-github-实现自动推送"><a href="#composer-整合-github-实现自动推送" class="headerlink" title="composer 整合 github 实现自动推送"></a>composer 整合 github 实现自动推送</h2><ul><li>先在 packagist 上获取 token<br><img src="http://api.jybx.me/token1.png" alt="token1"></li></ul><p><img src="http://api.jybx.me/api.png" alt="api"></p><ul><li>再在 github 上你的项目上点击 settings<br><img src="http://api.jybx.me/setting.png" alt="setting"></li></ul><p><img src="http://api.jybx.me/token.png" alt="token"></p>]]></content>
    
    <summary type="html">
    
      Composer 是 PHP 中的一个依赖管理工具. 它可以让你声明自己项目所依赖的库，然后它将会在项目中为你安装这些库。
    
    </summary>
    
      <category term="composer" scheme="http://blog.jybx.me/categories/composer/"/>
    
      <category term="packagist" scheme="http://blog.jybx.me/categories/composer/packagist/"/>
    
    
      <category term="composer" scheme="http://blog.jybx.me/tags/composer/"/>
    
      <category term="packagist" scheme="http://blog.jybx.me/tags/packagist/"/>
    
  </entry>
  
  <entry>
    <title>mac 如何优雅的使用 phpStorm</title>
    <link href="http://blog.jybx.me/mac-phpstorm-key.html"/>
    <id>http://blog.jybx.me/mac-phpstorm-key.html</id>
    <published>2016-09-17T08:38:47.000Z</published>
    <updated>2016-09-17T08:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="how-to-be-awesome-in-phpstorm"><a href="#how-to-be-awesome-in-phpstorm" class="headerlink" title="how-to-be-awesome-in-phpstorm"></a>how-to-be-awesome-in-phpstorm</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>官方下载地址：<a href="http://www.jetbrains.com/phpstorm/" target="_blank" rel="noopener">http://www.jetbrains.com/phpstorm/</a></p><h2 id="command-1-1-是数字"><a href="#command-1-1-是数字" class="headerlink" title="command + 1 (1 是数字)"></a>command + 1 (1 是数字)</h2><p>显示关闭左侧</p><h2 id="command-鼠标点击"><a href="#command-鼠标点击" class="headerlink" title="command + 鼠标点击"></a>command + 鼠标点击</h2><p>跳到类或方法或变量等声明处</p><h2 id="command-shift-tab"><a href="#command-shift-tab" class="headerlink" title="command + shift + tab"></a>command + shift + tab</h2><p>切换tab页文件</p><h2 id="command-shift"><a href="#command-shift" class="headerlink" title="command + shift + +,-"></a>command + shift + +,-</h2><p>展开或缩起</p><h2 id="command"><a href="#command" class="headerlink" title="command + ."></a>command + .</h2><p>折叠或展开选中的代码</p><h2 id="command-o"><a href="#command-o" class="headerlink" title="command + o"></a>command + o</h2><p>搜索类名的控制器</p><h2 id="command-option-o"><a href="#command-option-o" class="headerlink" title="command + option + o"></a>command + option + o</h2><p>搜索控制器中的方法</p><h2 id="command-shift-＋-a"><a href="#command-shift-＋-a" class="headerlink" title="command + shift ＋ a"></a>command + shift ＋ a</h2><p>搜索配置项， 比如 tab，top，plugins（安装插件），keymap<br>修改左侧的代码折叠线 folding outline</p><h2 id="command-＋-，"><a href="#command-＋-，" class="headerlink" title="command ＋ ，"></a>command ＋ ，</h2><p>打开配置搜索 breadcrumbs，去掉勾保存，就是去掉了页面的面包屑</p><h2 id="command-＋-control-＋-g"><a href="#command-＋-control-＋-g" class="headerlink" title="command ＋ control ＋ g"></a>command ＋ control ＋ g</h2><p>选中相同的代码 </p><h2 id="字体大小设置"><a href="#字体大小设置" class="headerlink" title="字体大小设置"></a>字体大小设置</h2><p><img src="http://api.jybx.me/font-size-1.png" alt="font-size"></p><h2 id="Ide-配色"><a href="#Ide-配色" class="headerlink" title="Ide 配色"></a>Ide 配色</h2><p><a href="http://daylerees.github.io/" target="_blank" rel="noopener">主题网址</a><br>在上面的网址中挑选你喜欢的配色名字，在 <a href="https://github.com/daylerees/colour-schemes/blob/master/jetbrains/" target="_blank" rel="noopener">这里</a> 选择你的配置文件<br><code>cd ~/Library/Preferences/PhpStorm2016.1</code><br>PhpStorm2016.1 因你的文件名不同而改变<br><code>cd colors</code><br><code>wget https://raw.githubusercontent.com/daylerees/colour-schemes/master/jetbrains/gloom.icls</code></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gloom.icls          <span class="number">100</span>%[===================&gt;]  <span class="number">51.48</span>K  <span class="number">96.1</span>KB/s    in <span class="number">0.5</span>s</span><br></pre></td></tr></table></figure><p>表明已下载成功！<br>重启 ide 就可以查看到<br><img src="http://api.jybx.me/gloom.png" alt="gloom"></p><h2 id="去掉标签栏"><a href="#去掉标签栏" class="headerlink" title="去掉标签栏"></a>去掉标签栏</h2><p>去掉 Top 上的勾<br><img src="http://api.jybx.me/top.png" alt="top"></p><h2 id="统一左侧目录和右侧代码区域的颜色"><a href="#统一左侧目录和右侧代码区域的颜色" class="headerlink" title="统一左侧目录和右侧代码区域的颜色"></a>统一左侧目录和右侧代码区域的颜色</h2><p><code>command＋，</code><br>搜索 plugins，点中间的，搜索 color ide 安装<br><img src="http://api.jybx.me/color-ide.png" alt="color-ide"></p><h2 id="修改快捷键"><a href="#修改快捷键" class="headerlink" title="修改快捷键"></a>修改快捷键</h2><p>File -&gt; Settings -&gt; IDE Settings -&gt; Keymap -&gt; 选择“eclipse” -&gt; 然后 “Copy” 一份 -&gt; 再个性化设置（自己习惯的）快捷键<br>同上搜索 keymap<br><img src="http://api.jybx.me/keymap.png" alt="keymap"></p><p><img src="http://api.jybx.me/reset.png" alt="reset"></p><p><img src="http://api.jybx.me/file.png" alt="file"></p><p><img src="http://api.jybx.me/fangfa.png" alt="fangfa"></p><p>按 <code>command R</code> 调出此页面<br><img src="http://api.jybx.me/functions.png" alt="functions"></p><h2 id="快速创建文件夹及目录"><a href="#快速创建文件夹及目录" class="headerlink" title="快速创建文件夹及目录"></a>快速创建文件夹及目录</h2><p><code>command ⬆️</code> 方向键上，选择你要在哪里创建<br><code>command N</code></p><h2 id="继承-Model"><a href="#继承-Model" class="headerlink" title="继承 Model"></a>继承 Model</h2><p><img src="http://api.jybx.me/model.png" alt="mode"></p><p><img src="http://api.jybx.me/extends-1.png" alt="extends"></p><p><img src="http://api.jybx.me/touch.png" alt="touch"></p><p><img src="http://api.jybx.me/my.png" alt="my"></p><h2 id="进行-PHP-代码风格设置"><a href="#进行-PHP-代码风格设置" class="headerlink" title="进行 PHP 代码风格设置"></a>进行 PHP 代码风格设置</h2><p><img src="http://api.jybx.me/style.png" alt="style"></p><h2 id="快速修改文件名字"><a href="#快速修改文件名字" class="headerlink" title="快速修改文件名字"></a>快速修改文件名字</h2><p><code>control T</code><br><img src="http://api.jybx.me/rename.png" alt="rename"></p><h2 id="Copy-为接口"><a href="#Copy-为接口" class="headerlink" title="Copy 为接口"></a>Copy 为接口</h2><p><img src="http://api.jybx.me/inter-1.png" alt="inte"></p><h2 id="定义为变量"><a href="#定义为变量" class="headerlink" title="定义为变量"></a>定义为变量</h2><p><img src="http://api.jybx.me/var.png" alt="va"></p><p><img src="http://api.jybx.me/str.png" alt="st"></p><h2 id="快速创建-PHP-construct-函数"><a href="#快速创建-PHP-construct-函数" class="headerlink" title="快速创建 PHP __construct() 函数"></a>快速创建 PHP __construct() 函数</h2><p><img src="http://api.jybx.me/constr.png" alt="const"></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><img src="http://api.jybx.me/con.png" alt="con"></p><p>option ＋ 回车<br><img src="http://api.jybx.me/class.png" alt="class"></p><p><img src="http://api.jybx.me/code.png" alt="code"></p><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><p><img src="http://api.jybx.me/split.png" alt="split"></p><p><code>command w</code> 关闭分屏<br>你也可以为它们设置快捷键</p><h2 id="快速添加-namespace"><a href="#快速添加-namespace" class="headerlink" title="快速添加 namespace"></a>快速添加 namespace</h2><p><img src="http://api.jybx.me/name.png" alt="name"></p><p><img src="http://api.jybx.me/php.png" alt="php"></p><h2 id="如何导出个性化设置，备份或给他人用？"><a href="#如何导出个性化设置，备份或给他人用？" class="headerlink" title="如何导出个性化设置，备份或给他人用？"></a>如何导出个性化设置，备份或给他人用？</h2><ul><li>导出：File -&gt; Exporting Settings</li><li>导入：File -&gt; Importing Settings</li></ul><h2 id="mac-下直接用命令行模式下载-Composer"><a href="#mac-下直接用命令行模式下载-Composer" class="headerlink" title="mac 下直接用命令行模式下载 Composer"></a>mac 下直接用命令行模式下载 Composer</h2><ul><li>使用 curl 指令下载：<blockquote><p>curl -sS <a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a> | php</p></blockquote></li><li>或是沒有安裝 curl ，也可以用 php 指令下载：<blockquote><p>php -r “readfile(‘<a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a>‘);” | php</p></blockquote></li><li>手动下载 Composer<blockquote><p><a href="https://getcomposer.org/composer.phar" target="_blank" rel="noopener">https://getcomposer.org/composer.phar</a></p></blockquote></li></ul><h2 id="mv-composer-phar-usr-local-bin-composer"><a href="#mv-composer-phar-usr-local-bin-composer" class="headerlink" title="mv composer.phar /usr/local/bin/composer"></a>mv composer.phar /usr/local/bin/composer</h2>]]></content>
    
    <summary type="html">
    
      PhpStorm是一个轻量级且便捷的PHP IDE，其旨在提供用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。
    
    </summary>
    
      <category term="phpStorm" scheme="http://blog.jybx.me/categories/phpStorm/"/>
    
    
      <category term="phpStorm" scheme="http://blog.jybx.me/tags/phpStorm/"/>
    
  </entry>
  
  <entry>
    <title>npm javascript 包管理</title>
    <link href="http://blog.jybx.me/npm.html"/>
    <id>http://blog.jybx.me/npm.html</id>
    <published>2016-09-11T13:57:01.000Z</published>
    <updated>2016-09-14T15:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-javascript-包管理"><a href="#npm-javascript-包管理" class="headerlink" title="npm javascript 包管理"></a>npm javascript 包管理</h1><h2 id="node-包管理器"><a href="#node-包管理器" class="headerlink" title="node 包管理器"></a>node 包管理器</h2><blockquote><p>Node 包管理器（Node Package Manager）。它是一个以 javascript 编写的软件包管理系统，默认环境为 Node.js，从Node.js0.6.3 版本开始，npm 被自动附带在安装包中。<br>npm 运行在命令行下，并用于管理相依性包，npm 也允许用户安装在 npm registry 上的 Node.js 应用程序。<br>npm 由 Isaac Z. Schlueter 开发，为了匹配 CommonJS 的规范，如 PHP 之于 (PEAR)、Perl 之于 (CPAN)，进而开发出 npm。</p></blockquote><h2 id="Node-js-安装配置"><a href="#Node-js-安装配置" class="headerlink" title="Node.js 安装配置"></a>Node.js 安装配置</h2><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>显示 node 安装的版本号<br><code>node -v</code><br>显示 npm 的版本号<br><code>npm -v</code><br>在 mac 上更新 npm<br><code>sudo npm install npm --global</code> </p><h2 id="NPM-教程"><a href="#NPM-教程" class="headerlink" title="NPM 教程"></a>NPM 教程</h2><p><a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">NPM 使用介绍</a></p><h2 id="淘宝-NPM-镜像"><a href="#淘宝-NPM-镜像" class="headerlink" title="淘宝 NPM 镜像"></a>淘宝 NPM 镜像</h2><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a></p><h2 id="使用-NPM-命令安装模块"><a href="#使用-NPM-命令安装模块" class="headerlink" title="使用 NPM 命令安装模块"></a>使用 NPM 命令安装模块</h2><p>从 <a href="http://npmjs.org" target="_blank" rel="noopener">http://npmjs.org</a> 维护的 public package registry 获取，模块可以使用 npm install 安装：<br><code>npm install &lt;moduleName&gt;</code></p><h2 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h2><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> express     <span class="comment"># 本地安装</span></span><br><span class="line">npm <span class="keyword">install</span> express -g   <span class="comment"># 全局安装</span></span><br></pre></td></tr></table></figure><p>如果出现以下错误：<br><code>npm err! Error: connect ECONNREFUSED 127.0.0.1:8087</code></p><p>解决办法为：<br><code>npm config set proxy null</code></p><h2 id="查看所有全局安装的模块"><a href="#查看所有全局安装的模块" class="headerlink" title="查看所有全局安装的模块"></a>查看所有全局安装的模块</h2><p><code>npm ls -g</code></p><h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><p><code>npm uninstall express</code><br><code>npm uninstall express -g</code></p><p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：<br><code>npm ls</code></p><h2 id="查看模块信息"><a href="#查看模块信息" class="headerlink" title="查看模块信息"></a>查看模块信息</h2><p><code>npm info express</code></p><h2 id="安装特定的版本"><a href="#安装特定的版本" class="headerlink" title="安装特定的版本"></a>安装特定的版本</h2><p><code>npm install express@1.*.0</code></p><h2 id="使用-package-json"><a href="#使用-package-json" class="headerlink" title="使用 package.json"></a>使用 package.json</h2><p>在你的项目里面使用：<br><code>npm init</code><br>根据提示信息输入你想填入的<br>在最后输入 “yes” 后会生成 package.json 文件。</p><h2 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a>Package.json 属性说明</h2><blockquote><p>name - 包名。<br>version - 包的版本号。<br>description - 包的描述。<br>homepage - 包的官网 url 。<br>author - 包的作者姓名。<br>contributors - 包的其他贡献者姓名。<br>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。<br>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。<br>main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后 require(“express”)。<br>keywords - 关键字</p></blockquote><h2 id="保存模块到-Package-json"><a href="#保存模块到-Package-json" class="headerlink" title="保存模块到 Package.json"></a>保存模块到 Package.json</h2><p><code>npm install express --save</code><br>开发依赖<br><code>npm install express --save-dev</code><br>删除<br><code>npm uninstall express --save</code></p><h2 id="查看当前项目所有可更新的包"><a href="#查看当前项目所有可更新的包" class="headerlink" title="查看当前项目所有可更新的包"></a>查看当前项目所有可更新的包</h2><p><code>npm outdated</code></p><h2 id="更新的包"><a href="#更新的包" class="headerlink" title="更新的包"></a>更新的包</h2><p><code>npm update</code></p><h2 id="查看是否更新成功-gulp-是安装的包"><a href="#查看是否更新成功-gulp-是安装的包" class="headerlink" title="查看是否更新成功 (gulp 是安装的包)"></a>查看是否更新成功 (gulp 是安装的包)</h2><p><code>npm list | grep gulp</code></p><h2 id="安装-nrm"><a href="#安装-nrm" class="headerlink" title="安装 nrm"></a>安装 nrm</h2><p><code>npm install nrm -g</code></p><h2 id="查看可以使用的源"><a href="#查看可以使用的源" class="headerlink" title="查看可以使用的源"></a>查看可以使用的源</h2><p><code>nrm ls</code><br>测试连接这些源的速度<br><code>nrm test</code></p><h2 id="切换当前的源"><a href="#切换当前的源" class="headerlink" title="切换当前的源"></a>切换当前的源</h2><p><code>nrm use taobao</code></p>]]></content>
    
    <summary type="html">
    
      Node 包管理器（Node Package Manager）。它是一个以 javascript 编写的软件包管理系统，默认环境为 Node.js，从Node.js0.6.3 版本开始，npm 被自动附带在安装包中。
    
    </summary>
    
      <category term="npm" scheme="http://blog.jybx.me/categories/npm/"/>
    
      <category term="nodejs" scheme="http://blog.jybx.me/categories/npm/nodejs/"/>
    
    
      <category term="npm" scheme="http://blog.jybx.me/tags/npm/"/>
    
      <category term="nodejs" scheme="http://blog.jybx.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + Github Pages 搭建个人独立博客</title>
    <link href="http://blog.jybx.me/hexo.html"/>
    <id>http://blog.jybx.me/hexo.html</id>
    <published>2016-09-03T16:11:53.000Z</published>
    <updated>2016-12-17T11:10:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Hexo-Github-Pages-搭建个人独立博客"><a href="#使用-Hexo-Github-Pages-搭建个人独立博客" class="headerlink" title="使用 Hexo + Github Pages 搭建个人独立博客"></a>使用 Hexo + Github Pages 搭建个人独立博客</h1><h2 id="什么是-Hexo-？"><a href="#什么是-Hexo-？" class="headerlink" title="什么是 Hexo ？"></a>什么是 Hexo ？</h2><blockquote><p>Hexo 是一个基于 Nodejs 快速简洁高效的博客框架，Hexo 使用 Markdown 语法来编辑文章，只需要几秒钟的时间就可以成生静态的网页。整个系统就是一个博客系统。</p></blockquote><h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>如果想使用 Hexo，需要在你的系统中支持 Nodejs 以及 Git，如果还没有，那就开始安装吧！</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>进入官网：<em><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></em> 下载<br>参考地址：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">nodejs安装</a></p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>下载地址：<a href="https://git-scm.com/download/" target="_blank" rel="noopener">官网</a><br>入门教程：<em><a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">http://git.oschina.net/progit/</a></em></p><h2 id="Github-Pages-设置"><a href="#Github-Pages-设置" class="headerlink" title="Github Pages 设置"></a>Github Pages 设置</h2><p>请自行注册账号，如有略过。<br>github 官网：<em><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></em></p><p>登陆之后，点击页面右上角的加号，选择 <code>New repository</code>，<br>进入代码库创建页面，在<code>Repository name</code>下填写 yourname.github.io，<code>Description (optional)</code>下填写一些简单的描述，然后保存。</p><h2 id="配置-SSH-密钥"><a href="#配置-SSH-密钥" class="headerlink" title="配置 SSH 密钥"></a>配置 SSH 密钥</h2><p>配置 Github 的 SSH 密钥可以让本地 git 项目与远程的 github 建立联系，让我们在本地写了代码之后直接通过 git 操作就可以实现本地代码库与 Github 代码库同步。操作如下：</p><ol><li><code>cd ~/. ssh</code></li><li><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></li><li>此时也可以输入特定的文件名，比如/Users/<em>**</em>/.ssh/github_rsa</li><li>根据提示，你需要输入密码和确认密码</li><li><code>cat ~/.ssh/github_rsa.pub</code> 并复制</li><li>登陆 GitHub,进入你的 Account Settings</li><li>选择 SSH Keys</li><li>粘贴密钥，添加即可</li><li><code>ssh -T git@github.com</code></li><li>输入yes就好，然后会看到</li><li><code>Hi ＊＊＊＊! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></li><li><code>git config --global user.name &quot;google&quot;//用户名</code></li><li><code>git config --global user.email  &quot;google@gmail.com&quot;//填写自己的邮箱</code></li></ol><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>如果命令无法运行，可以尝试更换 taobao 的 npm 源</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>**</p><blockquote><p>进入你的目录 <code>mkdir hexo &amp;&amp; cd hexo</code></p><p>Hexo 是基于 Node.js 的第三方模块，所以我们需要对其进行单独安装。Windows 用户打开 CMD，输入代码：<br><code>npm install -g hexo</code></p><p>Mac 用户打开 Terminal，输入代码：<br><code>sudo npm install -g hexo</code></p><p>创建一个 Hexo 的新框架<br><code>hexo init</code></p><p><img src="http://api.jybx.me/hexo1.png" alt="hexo1"><br>生成一套静态网页<br><code>hexo generate</code></p><p>在服务器上运行<br><code>hexo server</code></p><p>输入完毕后，会提示你使用浏览器进入 <em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em></p><p>Hexo 常用的几个命令：</p><ol><li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li><li>hexo server (hexo s) 启动本地 web 服务，用于博客的预览</li><li>hexo deploy (hexo d) 部署播客到远端（比如 github, heroku 等平台）</li><li>hexo n “学习笔记” (hexo n) 新建一篇标题为 <code>学习笔记</code> 的文章 </li><li>hexo clean 清除缓存文件 db.json 和已生成的静态文件 public</li></ol></blockquote><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>如你所见，默认的页面不好看。<br>进入官方主题库：<em><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes</a></em><br>挑选你喜欢的主题，我这里是：<em><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></em><br>打开终端，进入到 Hexo 的目录下，继续输入：<br><code>cd themes</code><br><code>git clone https://github.com/iissnan/hexo-theme-next.git</code><br><code>cd hexo</code><br>根目录上的 _config.yml 文件<br><code>vi _config.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: hexo-theme-next</span><br></pre></td></tr></table></figure><p><code>hexo generate</code><br><code>hexo server</code><br>进入 <em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em> 查看更换的主题<br>更多关于这款主题的配置请参考：<em><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></em> </p><h2 id="主题目录结构"><a href="#主题目录结构" class="headerlink" title="主题目录结构"></a>主题目录结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── _config<span class="selector-class">.yml</span> <span class="comment">// 主题配置文件</span></span><br><span class="line">├── languages <span class="comment">// 多语言文件夹</span></span><br><span class="line">├── layout</span><br><span class="line">│   ├── archive<span class="selector-class">.swig</span> <span class="comment">// 存档页模板</span></span><br><span class="line">│   ├── category<span class="selector-class">.swig</span> <span class="comment">// 分类文章列表页模板</span></span><br><span class="line">│   ├── includes <span class="comment">// 各页面共享的模板</span></span><br><span class="line">│   │   ├── layout<span class="selector-class">.swig</span> <span class="comment">// 页面布局模板，其它的页面模板都是根据它扩展来的</span></span><br><span class="line">│   │   ├── pagination<span class="selector-class">.swig</span> <span class="comment">// 翻页按钮模板</span></span><br><span class="line">│   │   └── recent-posts<span class="selector-class">.swig</span> <span class="comment">// 文章列表模板</span></span><br><span class="line">│   ├── index<span class="selector-class">.swig</span> <span class="comment">// 首页模板</span></span><br><span class="line">│   ├── page<span class="selector-class">.swig</span> <span class="comment">// 页面详情页模板</span></span><br><span class="line">│   ├── post<span class="selector-class">.swig</span> <span class="comment">// 文章详情页模板</span></span><br><span class="line">│   └── tag<span class="selector-class">.swig</span> <span class="comment">// 标签文章列表页模板</span></span><br><span class="line">└── source</span><br><span class="line">    ├── css</span><br><span class="line">    │   └── theme<span class="selector-class">.styl</span> <span class="comment">// 主题自定义 CSS 文件</span></span><br><span class="line">    ├── favicon.ico</span><br><span class="line">    └── js</span><br><span class="line">        └── theme<span class="selector-class">.js</span> <span class="comment">// 主题 JavaScript 文件</span></span><br></pre></td></tr></table></figure><h2 id="添加-“标签”-页面"><a href="#添加-“标签”-页面" class="headerlink" title="添加 “标签” 页面"></a>添加 “标签” 页面</h2><p>定位到 Hexo 站点目录下<br>使用 <code>hexo new page</code> 新建一个页面，命名为 tags<br>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-09</span><span class="bullet">-01</span> <span class="number">12</span><span class="string">:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>!!! 一定要注意博文格式，如 title: 后面有空格，不然会报错，让人好郁闷啊！<br><code>ERROR Process failed: _posts/***.md</code></p><h2 id="安装-Hexo-插件"><a href="#安装-Hexo-插件" class="headerlink" title="安装 Hexo 插件"></a>安装 Hexo 插件</h2><p>为了避免一些麻烦的错误如：<code>error deployer not found git hexo</code> 请将下面的插件都安装完。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h2 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h2><p>HEXO 默认的文章链接形式为 domain/year/month/day/postname，默认就是一个四级 url，并且可能造成 url 过长，对搜索引擎是十分不友好的，我们可以改成 domain/postname 的形式。编辑站点 _config.yml 文件，修改其中的 permalink 字段 <code>permalink: :year/:month/:day/:title/</code> 改为 <code>permalink: :title.html</code> 即可。</p><h2 id="给站点添加-sitemap-网站地图"><a href="#给站点添加-sitemap-网站地图" class="headerlink" title="给站点添加 sitemap 网站地图"></a>给站点添加 sitemap 网站地图</h2><p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。 －－摘自<a href="http://www.lovexing.cn/2016/03/15/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">万物</a><br>在 hexo 站点 _config.yml 中间添加代码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># hexo sitemap网站地图  </span></span><br><span class="line"><span class="symbol">sitemap:</span>  </span><br><span class="line"><span class="symbol">path:</span> sitemap.xml  </span><br><span class="line"><span class="symbol">baidusitemap:</span>  </span><br><span class="line"><span class="symbol">path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure><p>执行 <code>hexo g</code> 即可生成这两个文件，sitemap 是提交给谷歌的，baidusitemap 是提交给百度的。</p><h2 id="添加蜘蛛协议robots-txt"><a href="#添加蜘蛛协议robots-txt" class="headerlink" title="添加蜘蛛协议robots.txt"></a>添加蜘蛛协议robots.txt</h2><p>在 hexo 目录下的 source 目录下，新建 robots.txt，复制代码：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># hexo robots.txt</span></span><br><span class="line">User-agent: *</span><br><span class="line"><span class="symbol">Allow:</span> /</span><br><span class="line"></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/js/</span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/css/</span></span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/fonts/</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Sitemap:</span> http:<span class="comment">//blog.jybx.me/sitemap.xml</span></span><br><span class="line"><span class="symbol">Sitemap:</span> http:<span class="comment">//blog.jybx.me/baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>将最后的域名改成自己的就可以了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>在 hexo 项目的 source 目录下新建一个文件 CNAME (不需要后缀名)<br>在 CNAME 中添加一行(自己购买的域名)，注意不需要http://。</p><h2 id="Hexo-上传-README-文件"><a href="#Hexo-上传-README-文件" class="headerlink" title="Hexo 上传 README 文件"></a>Hexo 上传 README 文件</h2><p><code>cd .deploy/</code><br><code>touch README.md</code><br><code>vi README.md</code></p><h2 id="将本地的-Hexo-文件更新到-Github-的库中"><a href="#将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="将本地的 Hexo 文件更新到 Github 的库中"></a>将本地的 Hexo 文件更新到 Github 的库中</h2><blockquote><p>第一步、登录 Github 打开自己的项目 username.github.io<br>第二步、打开之后，点击 HTTPS，选择 HTTPS 类型地址<br>第三步、复制地址<br>第四步、打开你一开始创建的 Hexo 文件夹，编辑_config.yml 文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> https:<span class="comment">//github.com/****/****.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></blockquote><p>执行 <code>hexo clean</code> （缓存问题）<br>执行 <code>hexo g -d</code></p><h2 id="更新到最新版本的-Hexo"><a href="#更新到最新版本的-Hexo" class="headerlink" title="更新到最新版本的 Hexo"></a>更新到最新版本的 Hexo</h2><p><code>npm update -g hexo /** 使用 npm 命令更新 Hexo **/</code><br>查看 Hexo 的版本<br><code>hexo version</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hexo</span>: 3<span class="selector-class">.2</span><span class="selector-class">.2</span></span><br><span class="line"><span class="selector-tag">hexo-cli</span>: 1<span class="selector-class">.0</span><span class="selector-class">.2</span></span><br><span class="line"><span class="selector-tag">os</span>: <span class="selector-tag">Darwin</span> 15<span class="selector-class">.6</span><span class="selector-class">.0</span> <span class="selector-tag">darwin</span> <span class="selector-tag">x64</span></span><br><span class="line"><span class="selector-tag">http_parser</span>: 2<span class="selector-class">.7</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">node</span>: 6<span class="selector-class">.4</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">v8</span>: 5<span class="selector-class">.0</span><span class="selector-class">.71</span><span class="selector-class">.60</span></span><br><span class="line"><span class="selector-tag">uv</span>: 1<span class="selector-class">.9</span><span class="selector-class">.1</span></span><br><span class="line"><span class="selector-tag">zlib</span>: 1<span class="selector-class">.2</span><span class="selector-class">.8</span></span><br><span class="line"><span class="selector-tag">ares</span>: 1<span class="selector-class">.10</span><span class="selector-class">.1-DEV</span></span><br><span class="line"><span class="selector-tag">icu</span>: 57<span class="selector-class">.1</span></span><br><span class="line"><span class="selector-tag">modules</span>: 48</span><br><span class="line"><span class="selector-tag">openssl</span>: 1<span class="selector-class">.0</span><span class="selector-class">.2h</span></span><br></pre></td></tr></table></figure><h2 id="背景效果"><a href="#背景效果" class="headerlink" title="背景效果"></a>背景效果</h2><p>此效果摘自 <a href="http://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="noopener">一个程序猿之家</a><br>把 js 文件 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a> 和 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 放在 \themes\hexo-theme-next\source\js\src 文件目录下<br>更新 \themes\hexo-theme-next\layout_layout.swig 文件，在末尾（在前面引用会出现找不到的 bug）添加以下 js 引入代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在-NexT-主题上增加留言板的功能"><a href="#在-NexT-主题上增加留言板的功能" class="headerlink" title="在 NexT 主题上增加留言板的功能"></a>在 NexT 主题上增加留言板的功能</h2><p>前提是已添加多说插件，查看原文 <a href="http://www.lovexing.cn/2016/04/29/NexT%E4%B8%BB%E9%A2%98%E6%96%B0%E5%BB%BA-%E7%95%99%E8%A8%80-%E9%A1%B5%E9%9D%A2/" target="_blank" rel="noopener">万物</a></p><blockquote><p>修改主题配置文件 _config.yml（要注意是 hexo-theme-next 目录下的 _config.yml，不是 hexo 站点目录下的 _config.yml），即 hexo 初始化目录下的 /themes/hexo-theme-next/_config.yml，添加 guestbook 到 menu 中:</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> /  </span><br><span class="line">  <span class="meta">#categories: /categories  </span></span><br><span class="line"><span class="symbol">  about:</span> /about  </span><br><span class="line"><span class="symbol">  archives:</span> /archives  </span><br><span class="line"><span class="symbol">  tags:</span> /tags  </span><br><span class="line">  <span class="meta">#commonweal: /404.html  </span></span><br><span class="line"><span class="symbol">  guestbook:</span> /guestbook</span><br></pre></td></tr></table></figure><p>这样就在网站 menu 中增加了一个菜单：guestbook，此时留言板还没有真的实现。</p><blockquote><p>修改 hexo-theme-next/languages 文件目录中的 zh-Hans.yml 文件（我用的是简体中文的，其他语言也是类似的），即 hexo 初始化目录下 /themes/hexo-theme-next/languages/zh-Hans.yml，添加 guestbook: 留言 到 menu 中</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> 首页</span><br><span class="line"><span class="symbol">  archives:</span> 归档</span><br><span class="line"><span class="symbol">  categories:</span> 分类</span><br><span class="line"><span class="symbol">  tags:</span> 标签</span><br><span class="line"><span class="symbol">  about:</span> 关于</span><br><span class="line"><span class="symbol">  search:</span> 搜索</span><br><span class="line"><span class="symbol">  commonweal:</span> 公益<span class="number">404</span></span><br><span class="line"><span class="symbol">  guestbook:</span> 留言</span><br></pre></td></tr></table></figure><p>这样在网站上就可以显示中文留言两个字。</p><blockquote><p>新建guestbook页面，执行 <code>hexo new page &quot;guestbook&quot;</code>。此时会在 hexo 初始化目录下的 /source 中看到名为 guestbook 的文件夹，在 index.md 中添加 comments: true 如</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-09</span><span class="bullet">-15</span> <span class="number">14</span><span class="string">:44:19</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&gt; 最近访客</span></span><br><span class="line"><span class="string">&lt;div class="ds-recent-visitors" data-num-items="28" data-avatar-size="42" id="ds-recent-visitors"&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>class=“ds-recent-visitors”    //指定显示最近访客容器<br>data-num-items=“28”    //显示最近访客的数量<br>data-avatar-size=“42”    //显示最近访客头像尺寸大小<br>id=“ds-recent-visitors”    //为了调节最近访客样式加的</p></blockquote><h2 id="添加音乐播放器功能"><a href="#添加音乐播放器功能" class="headerlink" title="添加音乐播放器功能"></a>添加音乐播放器功能</h2><p>在网易音乐的中，生成外链播放器代码，放入刚才 guestbook 文件夹中的 index.md。－－摘自 <a href="http://www.iamlj.com/2016/07/add-music-player-function-for-hexo/" target="_blank" rel="noopener">jing’s</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: guestbook</span><br><span class="line">date: 2016-09-15 14:44:19</span><br><span class="line">comments: true</span><br><span class="line">---</span><br><span class="line">&gt; 最近访客</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-recent-visitors"</span> <span class="attr">data-num-items</span>=<span class="string">"28"</span> <span class="attr">data-avatar-size</span>=<span class="string">"42"</span> <span class="attr">id</span>=<span class="string">"ds-recent-visitors"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只显示播放器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"max-width: 350px;max-height: 150px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">style</span>=<span class="string">"margin-top: -35px;"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span><span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=3413782&amp;auto=1&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义头像样式"><a href="#自定义头像样式" class="headerlink" title="自定义头像样式"></a>自定义头像样式</h2><p>在 hexo/themes/hexo-theme-next/source/css/_common/components/sidebar 目录下修改 <code>vi sidebar.styl</code> ，将以下代码加在最后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">96px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* start*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">90%</span></span><br><span class="line">  webkit-transition: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="attribute">moz-transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="attribute">ms-transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="comment">/* end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用-Hexo-发表新文章"><a href="#用-Hexo-发表新文章" class="headerlink" title="用 Hexo 发表新文章"></a>用 Hexo 发表新文章</h2><p><code>hexo n &quot;文章标题&quot;</code></p><h2 id="MWeb-篇"><a href="#MWeb-篇" class="headerlink" title="MWeb 篇"></a>MWeb 篇</h2><p>打开 MWeb, ​Command + E 切换到外部模式(使用 cmd + L 可以切回默认的 library 模式), 然后把 hexo 下的 source 目录拖到左边, 设置它的 Display name 为 github blog (随意), 最重要一点是设置 Media Save Path 为 Absolute, 这样就可以直接使用 MWeb 的粘贴图片功能。<br><img src="http://www.cyper.me/media/14656594763908.jpg" alt=""></p><p>这样写新博客使用 hexo n “your new blog title”命令即可, MWeb 会监控到新生成的 md 文件并自动显示在当前的视图中, 在 MWeb 中编辑好后, 使用<code>hexo d -g</code>直接发布。</p><h2 id="文章正文内容详情"><a href="#文章正文内容详情" class="headerlink" title="文章正文内容详情"></a>文章正文内容详情</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">postName</span> <span class="comment">#文章页面上的显示名称，可以任意修改，不会出现在URL中</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-09</span><span class="bullet">-04</span> <span class="number">00</span><span class="string">:11:53</span> <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">example</span> <span class="comment">#分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[tag1,tag2,tag3]</span> <span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">附加一段文章摘要，字数最好在140字以内。</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">以下正文</span></span><br></pre></td></tr></table></figure><h2 id="七牛图床设置详细说明"><a href="#七牛图床设置详细说明" class="headerlink" title="七牛图床设置详细说明"></a>七牛图床设置详细说明</h2><p>如下图，进入 MWeb 的偏好设置 - 发布服务里，本地图片上传服务中，点右边的 七牛云存储 按钮，会跳出如下图的新增窗口：<br><img src="http://zh.mweb.im/media/14531669957228/14531677609529.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      Hexo 是一个基于 Nodejs 快速简洁高效的博客框架，Hexo 使用 Markdown 语法来编辑文章，只需要几秒钟的时间就可以成生静态的网页。整个系统就是一个博客系统。
    
    </summary>
    
      <category term="hexo" scheme="http://blog.jybx.me/categories/hexo/"/>
    
      <category term="github" scheme="http://blog.jybx.me/categories/hexo/github/"/>
    
    
      <category term="hexo" scheme="http://blog.jybx.me/tags/hexo/"/>
    
      <category term="github" scheme="http://blog.jybx.me/tags/github/"/>
    
      <category term="七牛云" scheme="http://blog.jybx.me/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="mweb" scheme="http://blog.jybx.me/tags/mweb/"/>
    
  </entry>
  
  <entry>
    <title>Mac Terminal 终端 配置 zsh</title>
    <link href="http://blog.jybx.me/Mac-Terminal-zsh.html"/>
    <id>http://blog.jybx.me/Mac-Terminal-zsh.html</id>
    <published>2016-04-25T02:36:31.000Z</published>
    <updated>2016-09-14T15:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-Terminal-终端-配置-zsh"><a href="#Mac-Terminal-终端-配置-zsh" class="headerlink" title="Mac Terminal 终端 配置 zsh"></a>Mac Terminal 终端 配置 zsh</h1><h2 id="Mac-自带-zsh，还是比较方便的哈"><a href="#Mac-自带-zsh，还是比较方便的哈" class="headerlink" title="Mac 自带 zsh，还是比较方便的哈"></a>Mac 自带 zsh，还是比较方便的哈</h2><p>首先，把 Terminal 的 shell 改一下：<br><code>chsh -s /bin/zsh</code><br>修改下你的 Terminal 的 ‘偏好设置’</p><h2 id="oh-my-zsh-安装"><a href="#oh-my-zsh-安装" class="headerlink" title="oh-my-zsh 安装"></a>oh-my-zsh 安装</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh 安装</a></p><ol><li><code>git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</code></li><li><code>cp ~/.zshrc ~/.zshrc.orig</code>   (此步可选)</li><li><code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></li></ol><h2 id="zsh-autosuggestions-安装自动提示"><a href="#zsh-autosuggestions-安装自动提示" class="headerlink" title="zsh-autosuggestions 安装自动提示"></a>zsh-autosuggestions 安装自动提示</h2><p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions 安装自动提示</a></p><ol><li><code>git clone git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</code></li><li>编辑 .zshrc 添加 source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</li><li>执行 <code>source .zshrc</code> </li></ol><h2 id="添加主机名"><a href="#添加主机名" class="headerlink" title="添加主机名"></a>添加主机名</h2><blockquote><pre><code>vim ~/.oh-my-zsh/themes/robbyrussell.zsh-theme</code></pre><p>注释原来的并添加下一句：</p></blockquote><pre><code>PROMPT=&apos;${ret_status}%M%{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} %     %{$reset_color%}&apos;</code></pre><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">oh-my-zsh 主题自选</a></p><blockquote><p>编辑 .zshrc<br><strong>修改 ZSH_THEME=robbyrussell</strong><br>执行 <code>source .zshrc</code> </p></blockquote><h2 id="oh-my-zsh-不能更新方法"><a href="#oh-my-zsh-不能更新方法" class="headerlink" title="oh-my-zsh 不能更新方法"></a>oh-my-zsh 不能更新方法</h2><blockquote><ol><li>cd ~/.oh-my-zsh/</li><li>git add .</li><li>git commit -m “commit message”</li><li>upgrade_oh_my_zsh</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      Mac Terminal 终端 配置 zsh
    
    </summary>
    
      <category term="Mac" scheme="http://blog.jybx.me/categories/Mac/"/>
    
      <category term="Terminal" scheme="http://blog.jybx.me/categories/Mac/Terminal/"/>
    
      <category term="Zsh" scheme="http://blog.jybx.me/categories/Mac/Terminal/Zsh/"/>
    
    
      <category term="Mac" scheme="http://blog.jybx.me/tags/Mac/"/>
    
      <category term="Terminal" scheme="http://blog.jybx.me/tags/Terminal/"/>
    
      <category term="Zsh" scheme="http://blog.jybx.me/tags/Zsh/"/>
    
  </entry>
  
  <entry>
    <title>孙子兵法</title>
    <link href="http://blog.jybx.me/sunzibingfa.html"/>
    <id>http://blog.jybx.me/sunzibingfa.html</id>
    <published>2016-01-18T10:42:07.000Z</published>
    <updated>2016-09-16T09:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="孙子兵法十三篇－孙武"><a href="#孙子兵法十三篇－孙武" class="headerlink" title="孙子兵法十三篇－孙武"></a>孙子兵法十三篇－孙武</h1><blockquote><p>人事管理：人的事物的管理，不太主观管人。</p></blockquote><h5 id="人事管理一定要有制度"><a href="#人事管理一定要有制度" class="headerlink" title="人事管理一定要有制度"></a>人事管理一定要有制度</h5><h5 id="经营理念很重要（薪资结构）"><a href="#经营理念很重要（薪资结构）" class="headerlink" title="经营理念很重要（薪资结构）"></a>经营理念很重要（薪资结构）</h5><h5 id="人是无法说服的"><a href="#人是无法说服的" class="headerlink" title="人是无法说服的"></a>人是无法说服的</h5><h5 id="当主管自己要情绪稳定"><a href="#当主管自己要情绪稳定" class="headerlink" title="当主管自己要情绪稳定"></a>当主管自己要情绪稳定</h5><h5 id="尽心尽力的是少数人"><a href="#尽心尽力的是少数人" class="headerlink" title="尽心尽力的是少数人"></a>尽心尽力的是少数人</h5><h5 id="不要把人逼到无路可走"><a href="#不要把人逼到无路可走" class="headerlink" title="不要把人逼到无路可走"></a>不要把人逼到无路可走</h5><h5 id="激励不能过分"><a href="#激励不能过分" class="headerlink" title="激励不能过分"></a>激励不能过分</h5><h5 id="看到员工，第一句话不要讲工作"><a href="#看到员工，第一句话不要讲工作" class="headerlink" title="看到员工，第一句话不要讲工作"></a>看到员工，第一句话不要讲工作</h5><h5 id="公司有没有向心力很重要，同心之后才能一心"><a href="#公司有没有向心力很重要，同心之后才能一心" class="headerlink" title="公司有没有向心力很重要，同心之后才能一心"></a>公司有没有向心力很重要，同心之后才能一心</h5><h5 id="部属能做的主管不要去做，部属能说的主管不要说"><a href="#部属能做的主管不要去做，部属能说的主管不要说" class="headerlink" title="部属能做的主管不要去做，部属能说的主管不要说"></a>部属能做的主管不要去做，部属能说的主管不要说</h5><h5 id="部属能想的你就不要想，即便在想了也要隐蔽你的想法，让他想，让他讲。主管要启发，不能用力"><a href="#部属能想的你就不要想，即便在想了也要隐蔽你的想法，让他想，让他讲。主管要启发，不能用力" class="headerlink" title="部属能想的你就不要想，即便在想了也要隐蔽你的想法，让他想，让他讲。主管要启发，不能用力"></a>部属能想的你就不要想，即便在想了也要隐蔽你的想法，让他想，让他讲。主管要启发，不能用力</h5><h5 id="主管不要说变就变，要造成对方非变不可"><a href="#主管不要说变就变，要造成对方非变不可" class="headerlink" title="主管不要说变就变，要造成对方非变不可"></a>主管不要说变就变，要造成对方非变不可</h5><h5 id="要动机很纯正，然后来有一些花样"><a href="#要动机很纯正，然后来有一些花样" class="headerlink" title="要动机很纯正，然后来有一些花样"></a>要动机很纯正，然后来有一些花样</h5><h5 id="水有目标，但是没有方向"><a href="#水有目标，但是没有方向" class="headerlink" title="水有目标，但是没有方向"></a>水有目标，但是没有方向</h5><h5 id="要注意小的问题"><a href="#要注意小的问题" class="headerlink" title="要注意小的问题"></a>要注意小的问题</h5><h5 id="越强调一件事情的时候，这个就是你的弱点"><a href="#越强调一件事情的时候，这个就是你的弱点" class="headerlink" title="越强调一件事情的时候，这个就是你的弱点"></a>越强调一件事情的时候，这个就是你的弱点</h5><h5 id="一个慈爱为怀的人不宜当将军，因为下不了决心"><a href="#一个慈爱为怀的人不宜当将军，因为下不了决心" class="headerlink" title="一个慈爱为怀的人不宜当将军，因为下不了决心"></a>一个慈爱为怀的人不宜当将军，因为下不了决心</h5><h5 id="有情有义的狠，就是合理"><a href="#有情有义的狠，就是合理" class="headerlink" title="有情有义的狠，就是合理"></a>有情有义的狠，就是合理</h5><h5 id="要正心，把心摆在中间"><a href="#要正心，把心摆在中间" class="headerlink" title="要正心，把心摆在中间"></a>要正心，把心摆在中间</h5><h5 id="心里是非分明，嘴里含含糊糊"><a href="#心里是非分明，嘴里含含糊糊" class="headerlink" title="心里是非分明，嘴里含含糊糊"></a>心里是非分明，嘴里含含糊糊</h5><h5 id="为目的而行动，不可为了行动而行动，不能为了细节却忽略了主题（决策就是大小轻重缓急）"><a href="#为目的而行动，不可为了行动而行动，不能为了细节却忽略了主题（决策就是大小轻重缓急）" class="headerlink" title="为目的而行动，不可为了行动而行动，不能为了细节却忽略了主题（决策就是大小轻重缓急）"></a>为目的而行动，不可为了行动而行动，不能为了细节却忽略了主题（决策就是大小轻重缓急）</h5><h5 id="性相近，习相远"><a href="#性相近，习相远" class="headerlink" title="性相近，习相远"></a>性相近，习相远</h5><h5 id="对人立法严，执法宽"><a href="#对人立法严，执法宽" class="headerlink" title="对人立法严，执法宽"></a>对人立法严，执法宽</h5><h2 id="中国的兵法的特征"><a href="#中国的兵法的特征" class="headerlink" title="中国的兵法的特征"></a>中国的兵法的特征</h2><blockquote><p>以人为中心，掌握人性<br> 以水为对象，模拟学习<br> 以中为标准，力求合理</p></blockquote><h2 id="等待是一种艺术"><a href="#等待是一种艺术" class="headerlink" title="等待是一种艺术"></a>等待是一种艺术</h2><blockquote><p>急事要缓办</p></blockquote><h2 id="四治"><a href="#四治" class="headerlink" title="四治"></a>四治</h2><h4 id="治心：治理员工的心"><a href="#治心：治理员工的心" class="headerlink" title="治心：治理员工的心"></a>治心：治理员工的心</h4><h6 id="治心－关怀导向"><a href="#治心－关怀导向" class="headerlink" title="治心－关怀导向"></a>治心－关怀导向</h6><blockquote><p>自己安定，待敌混乱<br> 自己沉着，待敌浮躁<br> 自己情绪稳定，凡事谋定而后动</p></blockquote><h4 id="治力：治理员工的力量"><a href="#治力：治理员工的力量" class="headerlink" title="治力：治理员工的力量"></a>治力：治理员工的力量</h4><h6 id="治力"><a href="#治力" class="headerlink" title="治力"></a>治力</h6><blockquote><p>利用地形，待敌来攻<br> 以逸待劳，以饱待饥<br> 利用形势少用权力，谆谆善诱不费力</p></blockquote><h4 id="治变：怎么让他自动的变，而不是我叫他变"><a href="#治变：怎么让他自动的变，而不是我叫他变" class="headerlink" title="治变：怎么让他自动的变，而不是我叫他变"></a>治变：怎么让他自动的变，而不是我叫他变</h4><h6 id="治变"><a href="#治变" class="headerlink" title="治变"></a>治变</h6><blockquote><p>不要正面冲突，出其不意<br> 自己立场先站稳，造成情势引导员工变动</p></blockquote><h4 id="治气：怎么把士气诱导到最有利的方向去"><a href="#治气：怎么把士气诱导到最有利的方向去" class="headerlink" title="治气：怎么把士气诱导到最有利的方向去"></a>治气：怎么把士气诱导到最有利的方向去</h4><h6 id="治气"><a href="#治气" class="headerlink" title="治气"></a>治气</h6><blockquote><p>士气旺盛，退避<br> 士气低落，攻击<br> 多用正气，阳气，维持正常士气</p></blockquote><h2 id="布局造势摆平"><a href="#布局造势摆平" class="headerlink" title="布局造势摆平"></a>布局造势摆平</h2><blockquote><p>示形之术（诱敌之术）设法让员工／顾客自发自动<br> 激流之计（加速效果）引发潜在能力，提高绩效<br> 两面手法（持续发挥）知己知彼才能百战不殆</p></blockquote><h2 id="兵势篇"><a href="#兵势篇" class="headerlink" title="兵势篇"></a>兵势篇</h2><blockquote><p>要操作敌人，必须造成一种状况，使敌人自动自发地行动，如能灵活地加以运用，则敌人将不战自败。</p></blockquote><h2 id="虚实篇"><a href="#虚实篇" class="headerlink" title="虚实篇"></a>虚实篇</h2><blockquote><p>让敌人依照我方的安排行动，不断攻击下来，须让他们自认为对本身有利，而不让对方觉察不利，否则敌人便不会来，强制不如诱敌。</p></blockquote><h2 id="地形篇"><a href="#地形篇" class="headerlink" title="地形篇"></a>地形篇</h2><blockquote><p>知己知彼，百胜不殆（中心思想）<br> 知天知地，胜利无穷</p></blockquote><h2 id="将有五危"><a href="#将有五危" class="headerlink" title="将有五危"></a>将有五危</h2><h5 id="必死"><a href="#必死" class="headerlink" title="必死"></a>必死</h5><p>无谓的牺牲</p><h5 id="必有援兵"><a href="#必有援兵" class="headerlink" title="必有援兵"></a>必有援兵</h5><p>就会被俘</p><h5 id="必怒"><a href="#必怒" class="headerlink" title="必怒"></a>必怒</h5><p>不能忍辱，易陷入敌计</p><h5 id="过分爱名"><a href="#过分爱名" class="headerlink" title="过分爱名"></a>过分爱名</h5><p>易被造谣中伤</p><h5 id="过分爱民"><a href="#过分爱民" class="headerlink" title="过分爱民"></a>过分爱民</h5><p>影响作战</p><h2 id="领导用人之道"><a href="#领导用人之道" class="headerlink" title="领导用人之道"></a>领导用人之道</h2><blockquote><p>不拘小节，能综合看大体<br> 不拘泥相对性的一面<br> 不因小失大，看近不看远</p></blockquote><h2 id="人事管理八大要领"><a href="#人事管理八大要领" class="headerlink" title="人事管理八大要领"></a>人事管理八大要领</h2><h5 id="进退（好聚好散）"><a href="#进退（好聚好散）" class="headerlink" title="进退（好聚好散）"></a>进退（好聚好散）</h5><h5 id="奖惩（先奖下面先罚上面）"><a href="#奖惩（先奖下面先罚上面）" class="headerlink" title="奖惩（先奖下面先罚上面）"></a>奖惩（先奖下面先罚上面）</h5><h5 id="教养"><a href="#教养" class="headerlink" title="教养"></a>教养</h5><h5 id="老死"><a href="#老死" class="headerlink" title="老死"></a>老死</h5>]]></content>
    
    <summary type="html">
    
      人事管理：人的事物的管理，不太主观管人
    
    </summary>
    
      <category term="孙子兵法" scheme="http://blog.jybx.me/categories/%E5%AD%99%E5%AD%90%E5%85%B5%E6%B3%95/"/>
    
    
      <category term="孙子兵法" scheme="http://blog.jybx.me/tags/%E5%AD%99%E5%AD%90%E5%85%B5%E6%B3%95/"/>
    
      <category term="孙武" scheme="http://blog.jybx.me/tags/%E5%AD%99%E6%AD%A6/"/>
    
  </entry>
  
</feed>
